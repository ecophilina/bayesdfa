// Generated by rstantools.  Do not edit by hand.

/*
    path is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    path is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with path.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_dfa_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'dfa', line 167, column 2 to column 41)",
                                                      " (in 'dfa', line 168, column 2 to column 15)",
                                                      " (in 'dfa', line 169, column 2 to column 68)",
                                                      " (in 'dfa', line 170, column 2 to column 73)",
                                                      " (in 'dfa', line 171, column 2 to column 61)",
                                                      " (in 'dfa', line 172, column 2 to column 39)",
                                                      " (in 'dfa', line 173, column 2 to column 56)",
                                                      " (in 'dfa', line 174, column 2 to column 31)",
                                                      " (in 'dfa', line 175, column 2 to column 31)",
                                                      " (in 'dfa', line 176, column 2 to column 51)",
                                                      " (in 'dfa', line 177, column 2 to column 53)",
                                                      " (in 'dfa', line 178, column 2 to column 51)",
                                                      " (in 'dfa', line 179, column 2 to column 32)",
                                                      " (in 'dfa', line 180, column 2 to column 19)",
                                                      " (in 'dfa', line 181, column 2 to column 40)",
                                                      " (in 'dfa', line 182, column 2 to column 44)",
                                                      " (in 'dfa', line 183, column 2 to column 35)",
                                                      " (in 'dfa', line 184, column 2 to column 37)",
                                                      " (in 'dfa', line 185, column 2 to column 67)",
                                                      " (in 'dfa', line 186, column 2 to column 51)",
                                                      " (in 'dfa', line 189, column 2 to column 19)",
                                                      " (in 'dfa', line 190, column 2 to column 16)",
                                                      " (in 'dfa', line 191, column 2 to column 19)",
                                                      " (in 'dfa', line 192, column 2 to column 48)",
                                                      " (in 'dfa', line 193, column 2 to column 50)",
                                                      " (in 'dfa', line 194, column 2 to column 47)",
                                                      " (in 'dfa', line 195, column 2 to column 20)",
                                                      " (in 'dfa', line 196, column 2 to column 22)",
                                                      " (in 'dfa', line 197, column 2 to column 16)",
                                                      " (in 'dfa', line 198, column 2 to column 22)",
                                                      " (in 'dfa', line 199, column 2 to column 50)",
                                                      " (in 'dfa', line 200, column 2 to column 79)",
                                                      " (in 'dfa', line 201, column 2 to column 84)",
                                                      " (in 'dfa', line 202, column 2 to column 33)",
                                                      " (in 'dfa', line 203, column 2 to column 65)",
                                                      " (in 'dfa', line 204, column 2 to column 67)",
                                                      " (in 'dfa', line 205, column 2 to column 47)",
                                                      " (in 'dfa', line 206, column 2 to column 46)",
                                                      " (in 'dfa', line 207, column 2 to column 15)",
                                                      " (in 'dfa', line 208, column 2 to column 22)",
                                                      " (in 'dfa', line 209, column 2 to column 62)",
                                                      " (in 'dfa', line 210, column 2 to column 41)",
                                                      " (in 'dfa', line 213, column 2 to column 31)",
                                                      " (in 'dfa', line 216, column 4 to column 21)",
                                                      " (in 'dfa', line 221, column 8 to column 40)",
                                                      " (in 'dfa', line 220, column 13 to line 222, column 7)",
                                                      " (in 'dfa', line 219, column 8 to column 40)",
                                                      " (in 'dfa', line 218, column 29 to line 220, column 7)",
                                                      " (in 'dfa', line 218, column 6 to line 222, column 7)",
                                                      " (in 'dfa', line 217, column 29 to line 223, column 5)",
                                                      " (in 'dfa', line 217, column 4 to line 223, column 5)",
                                                      " (in 'dfa', line 215, column 16 to line 224, column 3)",
                                                      " (in 'dfa', line 215, column 2 to line 224, column 3)",
                                                      " (in 'dfa', line 230, column 19 to column 34)",
                                                      " (in 'dfa', line 230, column 18 to column 35)",
                                                      " (in 'dfa', line 230, column 4 to column 35)",
                                                      " (in 'dfa', line 229, column 9 to line 232, column 3)",
                                                      " (in 'dfa', line 227, column 19 to column 39)",
                                                      " (in 'dfa', line 227, column 18 to column 40)",
                                                      " (in 'dfa', line 227, column 4 to column 40)",
                                                      " (in 'dfa', line 226, column 19 to line 229, column 3)",
                                                      " (in 'dfa', line 226, column 2 to line 232, column 3)",
                                                      " (in 'dfa', line 238, column 19 to column 36)",
                                                      " (in 'dfa', line 238, column 18 to column 37)",
                                                      " (in 'dfa', line 238, column 4 to column 37)",
                                                      " (in 'dfa', line 237, column 9 to line 240, column 3)",
                                                      " (in 'dfa', line 235, column 19 to column 43)",
                                                      " (in 'dfa', line 235, column 18 to column 44)",
                                                      " (in 'dfa', line 235, column 4 to column 44)",
                                                      " (in 'dfa', line 234, column 21 to line 237, column 3)",
                                                      " (in 'dfa', line 234, column 2 to line 240, column 3)",
                                                      " (in 'dfa', line 242, column 19 to column 52)",
                                                      " (in 'dfa', line 242, column 18 to column 53)",
                                                      " (in 'dfa', line 242, column 4 to column 53)",
                                                      " (in 'dfa', line 241, column 28 to line 243, column 3)",
                                                      " (in 'dfa', line 241, column 2 to line 243, column 3)",
                                                      " (in 'dfa', line 245, column 19 to column 56)",
                                                      " (in 'dfa', line 245, column 18 to column 57)",
                                                      " (in 'dfa', line 245, column 4 to column 57)",
                                                      " (in 'dfa', line 244, column 28 to line 246, column 3)",
                                                      " (in 'dfa', line 244, column 2 to line 246, column 3)",
                                                      " (in 'dfa', line 248, column 19 to column 55)",
                                                      " (in 'dfa', line 248, column 18 to column 56)",
                                                      " (in 'dfa', line 248, column 4 to column 56)",
                                                      " (in 'dfa', line 247, column 26 to line 249, column 3)",
                                                      " (in 'dfa', line 247, column 2 to line 249, column 3)",
                                                      " (in 'dfa', line 253, column 6 to column 52)",
                                                      " (in 'dfa', line 252, column 22 to line 254, column 5)",
                                                      " (in 'dfa', line 252, column 4 to line 254, column 5)",
                                                      " (in 'dfa', line 258, column 8 to column 56)",
                                                      " (in 'dfa', line 257, column 23 to line 259, column 7)",
                                                      " (in 'dfa', line 257, column 6 to line 259, column 7)",
                                                      " (in 'dfa', line 256, column 17 to line 260, column 5)",
                                                      " (in 'dfa', line 256, column 4 to line 260, column 5)",
                                                      " (in 'dfa', line 250, column 21 to line 261, column 3)",
                                                      " (in 'dfa', line 250, column 2 to line 261, column 3)",
                                                      " (in 'dfa', line 264, column 6 to column 40)",
                                                      " (in 'dfa', line 263, column 19 to line 265, column 5)",
                                                      " (in 'dfa', line 263, column 4 to line 265, column 5)",
                                                      " (in 'dfa', line 269, column 8 to column 43)",
                                                      " (in 'dfa', line 268, column 28 to line 270, column 7)",
                                                      " (in 'dfa', line 268, column 6 to line 270, column 7)",
                                                      " (in 'dfa', line 267, column 18 to line 271, column 5)",
                                                      " (in 'dfa', line 267, column 4 to line 271, column 5)",
                                                      " (in 'dfa', line 273, column 6 to column 23)",
                                                      " (in 'dfa', line 272, column 18 to line 274, column 5)",
                                                      " (in 'dfa', line 272, column 4 to line 274, column 5)",
                                                      " (in 'dfa', line 281, column 10 to column 27)",
                                                      " (in 'dfa', line 280, column 15 to line 282, column 9)",
                                                      " (in 'dfa', line 279, column 10 to column 28)",
                                                      " (in 'dfa', line 278, column 24 to line 280, column 9)",
                                                      " (in 'dfa', line 278, column 8 to line 282, column 9)",
                                                      " (in 'dfa', line 284, column 8 to column 35)",
                                                      " (in 'dfa', line 287, column 10 to column 59)",
                                                      " (in 'dfa', line 285, column 22 to line 288, column 9)",
                                                      " (in 'dfa', line 285, column 8 to line 288, column 9)",
                                                      " (in 'dfa', line 277, column 20 to line 289, column 7)",
                                                      " (in 'dfa', line 277, column 6 to line 289, column 7)",
                                                      " (in 'dfa', line 276, column 31 to line 290, column 5)",
                                                      " (in 'dfa', line 276, column 4 to line 290, column 5)",
                                                      " (in 'dfa', line 294, column 8 to column 23)",
                                                      " (in 'dfa', line 299, column 10 to column 53)",
                                                      " (in 'dfa', line 298, column 22 to line 300, column 9)",
                                                      " (in 'dfa', line 298, column 8 to line 300, column 9)",
                                                      " (in 'dfa', line 293, column 20 to line 301, column 7)",
                                                      " (in 'dfa', line 293, column 6 to line 301, column 7)",
                                                      " (in 'dfa', line 292, column 20 to line 302, column 5)",
                                                      " (in 'dfa', line 292, column 4 to line 302, column 5)",
                                                      " (in 'dfa', line 306, column 20 to column 67)",
                                                      " (in 'dfa', line 306, column 6 to column 67)",
                                                      " (in 'dfa', line 307, column 6 to column 37)",
                                                      " (in 'dfa', line 308, column 21 to column 41)",
                                                      " (in 'dfa', line 308, column 20 to column 42)",
                                                      " (in 'dfa', line 308, column 6 to column 42)",
                                                      " (in 'dfa', line 303, column 22 to line 309, column 5)",
                                                      " (in 'dfa', line 303, column 4 to line 309, column 5)",
                                                      " (in 'dfa', line 313, column 8 to column 75)",
                                                      " (in 'dfa', line 316, column 10 to column 41)",
                                                      " (in 'dfa', line 315, column 28 to line 317, column 9)",
                                                      " (in 'dfa', line 315, column 8 to line 317, column 9)",
                                                      " (in 'dfa', line 329, column 10 to column 177)",
                                                      " (in 'dfa', line 328, column 15 to line 330, column 9)",
                                                      " (in 'dfa', line 327, column 10 to column 84)",
                                                      " (in 'dfa', line 325, column 25 to line 328, column 9)",
                                                      " (in 'dfa', line 325, column 8 to line 330, column 9)",
                                                      " (in 'dfa', line 312, column 21 to line 331, column 7)",
                                                      " (in 'dfa', line 312, column 6 to line 331, column 7)",
                                                      " (in 'dfa', line 310, column 20 to line 332, column 5)",
                                                      " (in 'dfa', line 310, column 4 to line 332, column 5)",
                                                      " (in 'dfa', line 338, column 8 to column 49)",
                                                      " (in 'dfa', line 335, column 20 to line 339, column 7)",
                                                      " (in 'dfa', line 335, column 6 to line 339, column 7)",
                                                      " (in 'dfa', line 334, column 31 to line 340, column 5)",
                                                      " (in 'dfa', line 334, column 4 to line 340, column 5)",
                                                      " (in 'dfa', line 262, column 30 to line 341, column 3)",
                                                      " (in 'dfa', line 262, column 2 to line 341, column 3)",
                                                      " (in 'dfa', line 346, column 8 to column 23)",
                                                      " (in 'dfa', line 351, column 10 to column 53)",
                                                      " (in 'dfa', line 350, column 22 to line 352, column 9)",
                                                      " (in 'dfa', line 350, column 8 to line 352, column 9)",
                                                      " (in 'dfa', line 345, column 20 to line 353, column 7)",
                                                      " (in 'dfa', line 345, column 6 to line 353, column 7)",
                                                      " (in 'dfa', line 344, column 20 to line 354, column 5)",
                                                      " (in 'dfa', line 344, column 4 to line 354, column 5)",
                                                      " (in 'dfa', line 356, column 20 to column 67)",
                                                      " (in 'dfa', line 356, column 6 to column 67)",
                                                      " (in 'dfa', line 357, column 6 to column 37)",
                                                      " (in 'dfa', line 358, column 21 to column 41)",
                                                      " (in 'dfa', line 358, column 20 to column 42)",
                                                      " (in 'dfa', line 358, column 6 to column 42)",
                                                      " (in 'dfa', line 355, column 22 to line 359, column 5)",
                                                      " (in 'dfa', line 355, column 4 to line 359, column 5)",
                                                      " (in 'dfa', line 362, column 8 to column 75)",
                                                      " (in 'dfa', line 365, column 10 to column 41)",
                                                      " (in 'dfa', line 364, column 28 to line 366, column 9)",
                                                      " (in 'dfa', line 364, column 8 to line 366, column 9)",
                                                      " (in 'dfa', line 378, column 10 to column 177)",
                                                      " (in 'dfa', line 377, column 15 to line 379, column 9)",
                                                      " (in 'dfa', line 376, column 10 to column 84)",
                                                      " (in 'dfa', line 374, column 25 to line 377, column 9)",
                                                      " (in 'dfa', line 374, column 8 to line 379, column 9)",
                                                      " (in 'dfa', line 361, column 21 to line 380, column 7)",
                                                      " (in 'dfa', line 361, column 6 to line 380, column 7)",
                                                      " (in 'dfa', line 360, column 20 to line 381, column 5)",
                                                      " (in 'dfa', line 360, column 4 to line 381, column 5)",
                                                      " (in 'dfa', line 387, column 6 to column 35)",
                                                      " (in 'dfa', line 383, column 18 to line 388, column 5)",
                                                      " (in 'dfa', line 383, column 4 to line 388, column 5)",
                                                      " (in 'dfa', line 342, column 30 to line 389, column 3)",
                                                      " (in 'dfa', line 342, column 2 to line 389, column 3)",
                                                      " (in 'dfa', line 394, column 6 to column 125)",
                                                      " (in 'dfa', line 392, column 30 to line 395, column 5)",
                                                      " (in 'dfa', line 392, column 4 to line 395, column 5)",
                                                      " (in 'dfa', line 391, column 24 to line 396, column 3)",
                                                      " (in 'dfa', line 391, column 2 to line 396, column 3)",
                                                      " (in 'dfa', line 399, column 2 to column 15)",
                                                      " (in 'dfa', line 402, column 4 to column 26)",
                                                      " (in 'dfa', line 401, column 20 to line 403, column 3)",
                                                      " (in 'dfa', line 401, column 2 to line 403, column 3)",
                                                      " (in 'dfa', line 416, column 8 to column 117)",
                                                      " (in 'dfa', line 415, column 32 to line 417, column 7)",
                                                      " (in 'dfa', line 415, column 6 to line 417, column 7)",
                                                      " (in 'dfa', line 412, column 11 to line 418, column 5)",
                                                      " (in 'dfa', line 410, column 8 to column 130)",
                                                      " (in 'dfa', line 407, column 32 to line 411, column 7)",
                                                      " (in 'dfa', line 407, column 6 to line 411, column 7)",
                                                      " (in 'dfa', line 406, column 23 to line 412, column 5)",
                                                      " (in 'dfa', line 406, column 4 to line 418, column 5)",
                                                      " (in 'dfa', line 405, column 24 to line 419, column 3)",
                                                      " (in 'dfa', line 405, column 2 to line 419, column 3)",
                                                      " (in 'dfa', line 424, column 8 to column 29)",
                                                      " (in 'dfa', line 425, column 8 to column 31)",
                                                      " (in 'dfa', line 423, column 20 to line 426, column 7)",
                                                      " (in 'dfa', line 423, column 6 to line 426, column 7)",
                                                      " (in 'dfa', line 422, column 18 to line 427, column 5)",
                                                      " (in 'dfa', line 422, column 4 to line 427, column 5)",
                                                      " (in 'dfa', line 429, column 6 to column 99)",
                                                      " (in 'dfa', line 430, column 6 to column 56)",
                                                      " (in 'dfa', line 428, column 22 to line 431, column 5)",
                                                      " (in 'dfa', line 428, column 4 to line 431, column 5)",
                                                      " (in 'dfa', line 435, column 8 to column 57)",
                                                      " (in 'dfa', line 433, column 20 to line 436, column 7)",
                                                      " (in 'dfa', line 433, column 6 to line 436, column 7)",
                                                      " (in 'dfa', line 432, column 18 to line 437, column 5)",
                                                      " (in 'dfa', line 432, column 4 to line 437, column 5)",
                                                      " (in 'dfa', line 439, column 4 to column 88)",
                                                      " (in 'dfa', line 441, column 6 to column 35)",
                                                      " (in 'dfa', line 442, column 6 to column 56)",
                                                      " (in 'dfa', line 443, column 6 to column 51)",
                                                      " (in 'dfa', line 445, column 6 to column 113)",
                                                      " (in 'dfa', line 447, column 6 to column 107)",
                                                      " (in 'dfa', line 440, column 18 to line 448, column 5)",
                                                      " (in 'dfa', line 440, column 4 to line 448, column 5)",
                                                      " (in 'dfa', line 420, column 35 to line 449, column 3)",
                                                      " (in 'dfa', line 420, column 2 to line 449, column 3)",
                                                      " (in 'dfa', line 558, column 2 to column 27)",
                                                      " (in 'dfa', line 559, column 2 to column 31)",
                                                      " (in 'dfa', line 560, column 2 to column 31)",
                                                      " (in 'dfa', line 561, column 2 to column 20)",
                                                      " (in 'dfa', line 562, column 2 to column 24)",
                                                      " (in 'dfa', line 563, column 2 to column 43)",
                                                      " (in 'dfa', line 564, column 2 to column 40)",
                                                      " (in 'dfa', line 565, column 2 to column 17)",
                                                      " (in 'dfa', line 566, column 2 to column 8)",
                                                      " (in 'dfa', line 568, column 4 to column 53)",
                                                      " (in 'dfa', line 569, column 4 to column 45)",
                                                      " (in 'dfa', line 567, column 19 to line 570, column 3)",
                                                      " (in 'dfa', line 567, column 2 to line 570, column 3)",
                                                      " (in 'dfa', line 597, column 8 to column 208)",
                                                      " (in 'dfa', line 595, column 24 to line 598, column 7)",
                                                      " (in 'dfa', line 595, column 6 to line 598, column 7)",
                                                      " (in 'dfa', line 594, column 11 to line 599, column 5)",
                                                      " (in 'dfa', line 592, column 8 to column 112)",
                                                      " (in 'dfa', line 591, column 20 to line 593, column 7)",
                                                      " (in 'dfa', line 591, column 6 to line 593, column 7)",
                                                      " (in 'dfa', line 590, column 23 to line 594, column 5)",
                                                      " (in 'dfa', line 590, column 4 to line 599, column 5)",
                                                      " (in 'dfa', line 589, column 9 to line 600, column 3)",
                                                      " (in 'dfa', line 582, column 44 to column 206)",
                                                      " (in 'dfa', line 582, column 26 to column 206)",
                                                      " (in 'dfa', line 582, column 25 to column 207)",
                                                      " (in 'dfa', line 582, column 6 to column 207)",
                                                      " (in 'dfa', line 583, column 44 to column 212)",
                                                      " (in 'dfa', line 583, column 26 to column 212)",
                                                      " (in 'dfa', line 583, column 25 to column 213)",
                                                      " (in 'dfa', line 583, column 6 to column 213)",
                                                      " (in 'dfa', line 584, column 44 to column 156)",
                                                      " (in 'dfa', line 584, column 26 to column 156)",
                                                      " (in 'dfa', line 584, column 25 to column 157)",
                                                      " (in 'dfa', line 584, column 6 to column 157)",
                                                      " (in 'dfa', line 585, column 44 to column 192)",
                                                      " (in 'dfa', line 585, column 26 to column 192)",
                                                      " (in 'dfa', line 585, column 25 to column 193)",
                                                      " (in 'dfa', line 585, column 6 to column 193)",
                                                      " (in 'dfa', line 586, column 44 to column 160)",
                                                      " (in 'dfa', line 586, column 26 to column 160)",
                                                      " (in 'dfa', line 586, column 25 to column 161)",
                                                      " (in 'dfa', line 586, column 6 to column 161)",
                                                      " (in 'dfa', line 587, column 44 to column 178)",
                                                      " (in 'dfa', line 587, column 26 to column 178)",
                                                      " (in 'dfa', line 587, column 25 to column 179)",
                                                      " (in 'dfa', line 587, column 6 to column 179)",
                                                      " (in 'dfa', line 581, column 11 to line 588, column 5)",
                                                      " (in 'dfa', line 574, column 6 to column 12)",
                                                      " (in 'dfa', line 577, column 10 to column 20)",
                                                      " (in 'dfa', line 578, column 10 to column 72)",
                                                      " (in 'dfa', line 576, column 22 to line 579, column 9)",
                                                      " (in 'dfa', line 576, column 8 to line 579, column 9)",
                                                      " (in 'dfa', line 575, column 20 to line 580, column 7)",
                                                      " (in 'dfa', line 575, column 6 to line 580, column 7)",
                                                      " (in 'dfa', line 573, column 23 to line 581, column 5)",
                                                      " (in 'dfa', line 573, column 4 to line 588, column 5)",
                                                      " (in 'dfa', line 572, column 19 to line 589, column 3)",
                                                      " (in 'dfa', line 572, column 2 to line 600, column 3)",
                                                      " (in 'dfa', line 602, column 4 to column 23)",
                                                      " (in 'dfa', line 601, column 16 to line 603, column 3)",
                                                      " (in 'dfa', line 601, column 2 to line 603, column 3)",
                                                      " (in 'dfa', line 616, column 8 to column 76)",
                                                      " (in 'dfa', line 614, column 13 to line 617, column 7)",
                                                      " (in 'dfa', line 612, column 10 to column 91)",
                                                      " (in 'dfa', line 611, column 15 to line 613, column 9)",
                                                      " (in 'dfa', line 610, column 10 to column 88)",
                                                      " (in 'dfa', line 609, column 30 to line 611, column 9)",
                                                      " (in 'dfa', line 609, column 8 to line 613, column 9)",
                                                      " (in 'dfa', line 607, column 26 to line 614, column 7)",
                                                      " (in 'dfa', line 607, column 6 to line 617, column 7)",
                                                      " (in 'dfa', line 618, column 6 to column 43)",
                                                      " (in 'dfa', line 606, column 18 to line 619, column 5)",
                                                      " (in 'dfa', line 606, column 4 to line 619, column 5)",
                                                      " (in 'dfa', line 605, column 16 to line 620, column 3)",
                                                      " (in 'dfa', line 605, column 2 to line 620, column 3)",
                                                      " (in 'dfa', line 624, column 6 to column 67)",
                                                      " (in 'dfa', line 623, column 18 to line 625, column 5)",
                                                      " (in 'dfa', line 623, column 4 to line 625, column 5)",
                                                      " (in 'dfa', line 621, column 22 to line 626, column 3)",
                                                      " (in 'dfa', line 621, column 2 to line 626, column 3)",
                                                      " (in 'dfa', line 629, column 6 to column 75)",
                                                      " (in 'dfa', line 631, column 8 to column 41)",
                                                      " (in 'dfa', line 630, column 26 to line 632, column 7)",
                                                      " (in 'dfa', line 630, column 6 to line 632, column 7)",
                                                      " (in 'dfa', line 634, column 6 to column 147)",
                                                      " (in 'dfa', line 635, column 6 to column 91)",
                                                      " (in 'dfa', line 628, column 19 to line 636, column 5)",
                                                      " (in 'dfa', line 628, column 4 to line 636, column 5)",
                                                      " (in 'dfa', line 627, column 18 to line 637, column 3)",
                                                      " (in 'dfa', line 627, column 2 to line 637, column 3)",
                                                      " (in 'dfa', line 453, column 2 to column 20)",
                                                      " (in 'dfa', line 455, column 4 to column 22)",
                                                      " (in 'dfa', line 454, column 29 to line 456, column 3)",
                                                      " (in 'dfa', line 454, column 2 to line 456, column 3)",
                                                      " (in 'dfa', line 459, column 4 to column 26)",
                                                      " (in 'dfa', line 458, column 24 to line 460, column 3)",
                                                      " (in 'dfa', line 458, column 2 to line 460, column 3)",
                                                      " (in 'dfa', line 463, column 4 to column 22)",
                                                      " (in 'dfa', line 462, column 19 to line 464, column 3)",
                                                      " (in 'dfa', line 462, column 2 to line 464, column 3)",
                                                      " (in 'dfa', line 467, column 4 to column 24)",
                                                      " (in 'dfa', line 466, column 21 to line 468, column 3)",
                                                      " (in 'dfa', line 466, column 2 to line 468, column 3)",
                                                      " (in 'dfa', line 471, column 4 to column 32)",
                                                      " (in 'dfa', line 470, column 24 to line 472, column 3)",
                                                      " (in 'dfa', line 470, column 2 to line 472, column 3)",
                                                      " (in 'dfa', line 474, column 26 to column 53)",
                                                      " (in 'dfa', line 474, column 2 to column 53)",
                                                      " (in 'dfa', line 475, column 26 to column 55)",
                                                      " (in 'dfa', line 475, column 2 to column 55)",
                                                      " (in 'dfa', line 476, column 24 to column 53)",
                                                      " (in 'dfa', line 476, column 2 to column 53)",
                                                      " (in 'dfa', line 479, column 4 to column 33)",
                                                      " (in 'dfa', line 478, column 19 to line 480, column 3)",
                                                      " (in 'dfa', line 478, column 2 to line 480, column 3)",
                                                      " (in 'dfa', line 486, column 4 to column 63)",
                                                      " (in 'dfa', line 489, column 6 to column 37)",
                                                      " (in 'dfa', line 488, column 18 to line 490, column 5)",
                                                      " (in 'dfa', line 488, column 4 to line 490, column 5)",
                                                      " (in 'dfa', line 481, column 16 to line 491, column 3)",
                                                      " (in 'dfa', line 481, column 2 to line 491, column 3)",
                                                      " (in 'dfa', line 514, column 8 to column 33)",
                                                      " (in 'dfa', line 517, column 10 to column 69)",
                                                      " (in 'dfa', line 515, column 26 to line 518, column 9)",
                                                      " (in 'dfa', line 515, column 8 to line 518, column 9)",
                                                      " (in 'dfa', line 513, column 13 to line 519, column 7)",
                                                      " (in 'dfa', line 502, column 12 to column 61)",
                                                      " (in 'dfa', line 501, column 17 to line 503, column 11)",
                                                      " (in 'dfa', line 500, column 12 to column 58)",
                                                      " (in 'dfa', line 499, column 32 to line 501, column 11)",
                                                      " (in 'dfa', line 499, column 10 to line 503, column 11)",
                                                      " (in 'dfa', line 498, column 22 to line 504, column 9)",
                                                      " (in 'dfa', line 498, column 8 to line 504, column 9)",
                                                      " (in 'dfa', line 510, column 12 to column 84)",
                                                      " (in 'dfa', line 509, column 17 to line 511, column 11)",
                                                      " (in 'dfa', line 508, column 12 to column 81)",
                                                      " (in 'dfa', line 507, column 32 to line 509, column 11)",
                                                      " (in 'dfa', line 507, column 10 to line 511, column 11)",
                                                      " (in 'dfa', line 505, column 26 to line 512, column 9)",
                                                      " (in 'dfa', line 505, column 8 to line 512, column 9)",
                                                      " (in 'dfa', line 497, column 26 to line 513, column 7)",
                                                      " (in 'dfa', line 497, column 6 to line 519, column 7)",
                                                      " (in 'dfa', line 496, column 18 to line 520, column 5)",
                                                      " (in 'dfa', line 496, column 4 to line 520, column 5)",
                                                      " (in 'dfa', line 495, column 18 to line 521, column 3)",
                                                      " (in 'dfa', line 495, column 2 to line 521, column 3)",
                                                      " (in 'dfa', line 524, column 6 to column 33)",
                                                      " (in 'dfa', line 523, column 18 to line 525, column 5)",
                                                      " (in 'dfa', line 523, column 4 to line 525, column 5)",
                                                      " (in 'dfa', line 522, column 20 to line 526, column 3)",
                                                      " (in 'dfa', line 522, column 2 to line 526, column 3)",
                                                      " (in 'dfa', line 533, column 6 to column 36)",
                                                      " (in 'dfa', line 532, column 18 to line 534, column 5)",
                                                      " (in 'dfa', line 532, column 4 to line 534, column 5)",
                                                      " (in 'dfa', line 531, column 9 to line 535, column 3)",
                                                      " (in 'dfa', line 529, column 4 to column 21)",
                                                      " (in 'dfa', line 530, column 4 to column 24)",
                                                      " (in 'dfa', line 527, column 30 to line 531, column 3)",
                                                      " (in 'dfa', line 527, column 2 to line 535, column 3)",
                                                      " (in 'dfa', line 553, column 44 to column 241)",
                                                      " (in 'dfa', line 553, column 26 to column 241)",
                                                      " (in 'dfa', line 553, column 25 to column 242)",
                                                      " (in 'dfa', line 553, column 6 to column 242)",
                                                      " (in 'dfa', line 552, column 11 to line 554, column 5)",
                                                      " (in 'dfa', line 551, column 40 to column 141)",
                                                      " (in 'dfa', line 551, column 26 to column 141)",
                                                      " (in 'dfa', line 551, column 25 to column 142)",
                                                      " (in 'dfa', line 551, column 6 to column 142)",
                                                      " (in 'dfa', line 550, column 23 to line 552, column 5)",
                                                      " (in 'dfa', line 550, column 4 to line 554, column 5)",
                                                      " (in 'dfa', line 548, column 9 to line 555, column 3)",
                                                      " (in 'dfa', line 541, column 46 to column 205)",
                                                      " (in 'dfa', line 541, column 28 to column 205)",
                                                      " (in 'dfa', line 541, column 27 to column 206)",
                                                      " (in 'dfa', line 541, column 8 to column 206)",
                                                      " (in 'dfa', line 542, column 46 to column 211)",
                                                      " (in 'dfa', line 542, column 28 to column 211)",
                                                      " (in 'dfa', line 542, column 27 to column 212)",
                                                      " (in 'dfa', line 542, column 8 to column 212)",
                                                      " (in 'dfa', line 543, column 46 to column 155)",
                                                      " (in 'dfa', line 543, column 28 to column 155)",
                                                      " (in 'dfa', line 543, column 27 to column 156)",
                                                      " (in 'dfa', line 543, column 8 to column 156)",
                                                      " (in 'dfa', line 544, column 46 to column 191)",
                                                      " (in 'dfa', line 544, column 28 to column 191)",
                                                      " (in 'dfa', line 544, column 27 to column 192)",
                                                      " (in 'dfa', line 544, column 8 to column 192)",
                                                      " (in 'dfa', line 545, column 46 to column 159)",
                                                      " (in 'dfa', line 545, column 28 to column 159)",
                                                      " (in 'dfa', line 545, column 27 to column 160)",
                                                      " (in 'dfa', line 545, column 8 to column 160)",
                                                      " (in 'dfa', line 546, column 46 to column 177)",
                                                      " (in 'dfa', line 546, column 28 to column 177)",
                                                      " (in 'dfa', line 546, column 27 to column 178)",
                                                      " (in 'dfa', line 546, column 8 to column 178)",
                                                      " (in 'dfa', line 540, column 11 to line 547, column 5)",
                                                      " (in 'dfa', line 539, column 40 to column 95)",
                                                      " (in 'dfa', line 539, column 26 to column 95)",
                                                      " (in 'dfa', line 539, column 25 to column 96)",
                                                      " (in 'dfa', line 539, column 6 to column 96)",
                                                      " (in 'dfa', line 538, column 23 to line 540, column 5)",
                                                      " (in 'dfa', line 538, column 4 to line 547, column 5)",
                                                      " (in 'dfa', line 537, column 19 to line 548, column 3)",
                                                      " (in 'dfa', line 537, column 2 to line 555, column 3)",
                                                      " (in 'dfa', line 58, column 2 to column 17)",
                                                      " (in 'dfa', line 59, column 2 to column 17)",
                                                      " (in 'dfa', line 60, column 2 to column 17)",
                                                      " (in 'dfa', line 61, column 2 to column 18)",
                                                      " (in 'dfa', line 62, column 24 to column 26)",
                                                      " (in 'dfa', line 62, column 2 to column 28)",
                                                      " (in 'dfa', line 63, column 24 to column 26)",
                                                      " (in 'dfa', line 63, column 2 to column 28)",
                                                      " (in 'dfa', line 64, column 2 to column 26)",
                                                      " (in 'dfa', line 65, column 23 to column 24)",
                                                      " (in 'dfa', line 65, column 2 to column 26)",
                                                      " (in 'dfa', line 66, column 2 to column 21)",
                                                      " (in 'dfa', line 67, column 26 to column 31)",
                                                      " (in 'dfa', line 67, column 2 to column 33)",
                                                      " (in 'dfa', line 68, column 26 to column 31)",
                                                      " (in 'dfa', line 68, column 2 to column 33)",
                                                      " (in 'dfa', line 69, column 2 to column 21)",
                                                      " (in 'dfa', line 70, column 28 to column 33)",
                                                      " (in 'dfa', line 70, column 2 to column 35)",
                                                      " (in 'dfa', line 71, column 28 to column 33)",
                                                      " (in 'dfa', line 71, column 2 to column 35)",
                                                      " (in 'dfa', line 72, column 9 to column 14)",
                                                      " (in 'dfa', line 72, column 2 to column 16)",
                                                      " (in 'dfa', line 73, column 21 to column 26)",
                                                      " (in 'dfa', line 73, column 2 to column 28)",
                                                      " (in 'dfa', line 74, column 14 to column 19)",
                                                      " (in 'dfa', line 74, column 2 to column 21)",
                                                      " (in 'dfa', line 75, column 2 to column 20)",
                                                      " (in 'dfa', line 76, column 27 to column 31)",
                                                      " (in 'dfa', line 76, column 2 to column 33)",
                                                      " (in 'dfa', line 77, column 27 to column 31)",
                                                      " (in 'dfa', line 77, column 2 to column 33)",
                                                      " (in 'dfa', line 78, column 2 to column 25)",
                                                      " (in 'dfa', line 79, column 2 to column 18)",
                                                      " (in 'dfa', line 80, column 2 to column 17)",
                                                      " (in 'dfa', line 81, column 2 to column 14)",
                                                      " (in 'dfa', line 82, column 2 to column 14)",
                                                      " (in 'dfa', line 83, column 2 to column 16)",
                                                      " (in 'dfa', line 84, column 2 to column 29)",
                                                      " (in 'dfa', line 85, column 2 to column 27)",
                                                      " (in 'dfa', line 86, column 22 to column 35)",
                                                      " (in 'dfa', line 86, column 2 to column 39)",
                                                      " (in 'dfa', line 87, column 23 to column 36)",
                                                      " (in 'dfa', line 87, column 2 to column 38)",
                                                      " (in 'dfa', line 88, column 22 to column 35)",
                                                      " (in 'dfa', line 88, column 2 to column 37)",
                                                      " (in 'dfa', line 89, column 2 to column 29)",
                                                      " (in 'dfa', line 90, column 2 to column 27)",
                                                      " (in 'dfa', line 91, column 22 to column 35)",
                                                      " (in 'dfa', line 91, column 2 to column 39)",
                                                      " (in 'dfa', line 92, column 23 to column 36)",
                                                      " (in 'dfa', line 92, column 2 to column 38)",
                                                      " (in 'dfa', line 93, column 2 to column 18)",
                                                      " (in 'dfa', line 94, column 2 to column 27)",
                                                      " (in 'dfa', line 95, column 2 to column 34)",
                                                      " (in 'dfa', line 96, column 2 to column 33)",
                                                      " (in 'dfa', line 97, column 2 to column 31)",
                                                      " (in 'dfa', line 98, column 2 to column 22)",
                                                      " (in 'dfa', line 99, column 2 to column 26)",
                                                      " (in 'dfa', line 100, column 2 to column 22)",
                                                      " (in 'dfa', line 101, column 2 to column 23)",
                                                      " (in 'dfa', line 102, column 9 to column 10)",
                                                      " (in 'dfa', line 102, column 12 to column 19)",
                                                      " (in 'dfa', line 102, column 2 to column 30)",
                                                      " (in 'dfa', line 103, column 17 to column 24)",
                                                      " (in 'dfa', line 103, column 2 to column 26)",
                                                      " (in 'dfa', line 107, column 12 to column 19)",
                                                      " (in 'dfa', line 107, column 2 to column 38)",
                                                      " (in 'dfa', line 108, column 2 to column 16)",
                                                      " (in 'dfa', line 109, column 2 to column 41)",
                                                      " (in 'dfa', line 110, column 2 to column 41)",
                                                      " (in 'dfa', line 111, column 2 to column 39)",
                                                      " (in 'dfa', line 112, column 2 to column 44)",
                                                      " (in 'dfa', line 113, column 2 to column 25)",
                                                      " (in 'dfa', line 114, column 19 to column 24)",
                                                      " (in 'dfa', line 114, column 2 to column 26)",
                                                      " (in 'dfa', line 117, column 2 to column 13)",
                                                      " (in 'dfa', line 118, column 2 to column 15)",
                                                      " (in 'dfa', line 119, column 9 to column 10)",
                                                      " (in 'dfa', line 119, column 2 to column 18)",
                                                      " (in 'dfa', line 120, column 17 to column 18)",
                                                      " (in 'dfa', line 120, column 2 to column 20)",
                                                      " (in 'dfa', line 121, column 23 to column 28)",
                                                      " (in 'dfa', line 121, column 2 to column 30)",
                                                      " (in 'dfa', line 122, column 9 to column 29)",
                                                      " (in 'dfa', line 122, column 2 to column 41)",
                                                      " (in 'dfa', line 123, column 9 to column 16)",
                                                      " (in 'dfa', line 123, column 2 to column 26)",
                                                      " (in 'dfa', line 124, column 2 to column 23)",
                                                      " (in 'dfa', line 125, column 2 to column 21)",
                                                      " (in 'dfa', line 127, column 4 to column 45)",
                                                      " (in 'dfa', line 126, column 20 to line 128, column 3)",
                                                      " (in 'dfa', line 126, column 2 to line 128, column 3)",
                                                      " (in 'dfa', line 130, column 4 to column 21)",
                                                      " (in 'dfa', line 129, column 16 to line 131, column 3)",
                                                      " (in 'dfa', line 129, column 2 to line 131, column 3)",
                                                      " (in 'dfa', line 133, column 4 to column 17)",
                                                      " (in 'dfa', line 132, column 16 to line 134, column 3)",
                                                      " (in 'dfa', line 132, column 2 to line 134, column 3)",
                                                      " (in 'dfa', line 136, column 4 to column 19)",
                                                      " (in 'dfa', line 135, column 22 to line 137, column 3)",
                                                      " (in 'dfa', line 135, column 2 to line 137, column 3)",
                                                      " (in 'dfa', line 139, column 2 to column 19)",
                                                      " (in 'dfa', line 144, column 6 to column 19)",
                                                      " (in 'dfa', line 143, column 11 to line 145, column 5)",
                                                      " (in 'dfa', line 142, column 6 to column 23)",
                                                      " (in 'dfa', line 141, column 21 to line 143, column 5)",
                                                      " (in 'dfa', line 141, column 4 to line 145, column 5)",
                                                      " (in 'dfa', line 140, column 21 to line 146, column 3)",
                                                      " (in 'dfa', line 140, column 2 to line 146, column 3)",
                                                      " (in 'dfa', line 156, column 4 to column 15)",
                                                      " (in 'dfa', line 154, column 9 to line 157, column 3)",
                                                      " (in 'dfa', line 149, column 4 to column 15)",
                                                      " (in 'dfa', line 152, column 6 to column 17)",
                                                      " (in 'dfa', line 150, column 23 to line 153, column 5)",
                                                      " (in 'dfa', line 150, column 4 to line 153, column 5)",
                                                      " (in 'dfa', line 147, column 19 to line 154, column 3)",
                                                      " (in 'dfa', line 147, column 2 to line 157, column 3)",
                                                      " (in 'dfa', line 160, column 18 to column 35)",
                                                      " (in 'dfa', line 160, column 4 to column 35)",
                                                      " (in 'dfa', line 159, column 28 to line 161, column 3)",
                                                      " (in 'dfa', line 159, column 2 to line 161, column 3)",
                                                      " (in 'dfa', line 163, column 2 to column 23)",
                                                      " (in 'dfa', line 164, column 29 to column 47)",
                                                      " (in 'dfa', line 164, column 2 to column 47)",
                                                      " (in 'dfa', line 167, column 9 to column 19)",
                                                      " (in 'dfa', line 167, column 20 to column 34)",
                                                      " (in 'dfa', line 168, column 9 to column 10)",
                                                      " (in 'dfa', line 169, column 18 to column 62)",
                                                      " (in 'dfa', line 170, column 44 to column 69)",
                                                      " (in 'dfa', line 171, column 30 to column 54)",
                                                      " (in 'dfa', line 172, column 17 to column 37)",
                                                      " (in 'dfa', line 172, column 10 to column 11)",
                                                      " (in 'dfa', line 173, column 9 to column 23)",
                                                      " (in 'dfa', line 173, column 25 to column 45)",
                                                      " (in 'dfa', line 174, column 9 to column 20)",
                                                      " (in 'dfa', line 174, column 22 to column 23)",
                                                      " (in 'dfa', line 175, column 9 to column 20)",
                                                      " (in 'dfa', line 175, column 22 to column 23)",
                                                      " (in 'dfa', line 176, column 22 to column 49)",
                                                      " (in 'dfa', line 177, column 24 to column 51)",
                                                      " (in 'dfa', line 178, column 24 to column 49)",
                                                      " (in 'dfa', line 179, column 19 to column 30)",
                                                      " (in 'dfa', line 180, column 13 to column 17)",
                                                      " (in 'dfa', line 181, column 29 to column 38)",
                                                      " (in 'dfa', line 182, column 31 to column 42)",
                                                      " (in 'dfa', line 183, column 25 to column 33)",
                                                      " (in 'dfa', line 184, column 23 to column 29)",
                                                      " (in 'dfa', line 185, column 30 to column 65)",
                                                      " (in 'dfa', line 186, column 39 to column 49)",
                                                      " (in 'dfa', line 186, column 9 to column 24)",
                                                      " (in 'dfa', line 189, column 9 to column 10)",
                                                      " (in 'dfa', line 189, column 11 to column 12)",
                                                      " (in 'dfa', line 190, column 9 to column 10)",
                                                      " (in 'dfa', line 190, column 11 to column 12)",
                                                      " (in 'dfa', line 191, column 9 to column 10)",
                                                      " (in 'dfa', line 191, column 11 to column 12)",
                                                      " (in 'dfa', line 192, column 18 to column 36)",
                                                      " (in 'dfa', line 193, column 18 to column 36)",
                                                      " (in 'dfa', line 194, column 18 to column 34)",
                                                      " (in 'dfa', line 195, column 9 to column 10)",
                                                      " (in 'dfa', line 196, column 9 to column 10)",
                                                      " (in 'dfa', line 197, column 9 to column 10)",
                                                      " (in 'dfa', line 197, column 11 to column 12)",
                                                      " (in 'dfa', line 198, column 9 to column 10)",
                                                      " (in 'dfa', line 199, column 18 to column 39)",
                                                      " (in 'dfa', line 200, column 9 to column 35)",
                                                      " (in 'dfa', line 200, column 37 to column 63)",
                                                      " (in 'dfa', line 201, column 9 to column 39)",
                                                      " (in 'dfa', line 201, column 41 to column 71)",
                                                      " (in 'dfa', line 202, column 9 to column 17)",
                                                      " (in 'dfa', line 202, column 18 to column 19)",
                                                      " (in 'dfa', line 203, column 9 to column 30)",
                                                      " (in 'dfa', line 203, column 32 to column 53)",
                                                      " (in 'dfa', line 204, column 9 to column 30)",
                                                      " (in 'dfa', line 204, column 32 to column 53)",
                                                      " (in 'dfa', line 205, column 9 to column 30)",
                                                      " (in 'dfa', line 206, column 9 to column 30)",
                                                      " (in 'dfa', line 208, column 9 to column 10)",
                                                      " (in 'dfa', line 209, column 9 to column 23)",
                                                      " (in 'dfa', line 209, column 25 to column 45)",
                                                      " (in 'dfa', line 210, column 38 to column 39)",
                                                      " (in 'dfa', line 210, column 9 to column 16)",
                                                      " (in 'dfa', line 210, column 18 to column 25)",
                                                      " (in 'dfa', line 213, column 9 to column 14)",
                                                      " (in 'dfa', line 558, column 9 to column 17)",
                                                      " (in 'dfa', line 559, column 9 to column 15)",
                                                      " (in 'dfa', line 559, column 17 to column 23)",
                                                      " (in 'dfa', line 560, column 9 to column 15)",
                                                      " (in 'dfa', line 560, column 17 to column 23)",
                                                      " (in 'dfa', line 561, column 9 to column 10)",
                                                      " (in 'dfa', line 561, column 11 to column 12)",
                                                      " (in 'dfa', line 562, column 9 to column 10)",
                                                      " (in 'dfa', line 563, column 9 to column 16)",
                                                      " (in 'dfa', line 563, column 18 to column 25)",
                                                      " (in 'dfa', line 564, column 13 to column 20)",
                                                      " (in 'dfa', line 7, column 13 to column 16)",
                                                      " (in 'dfa', line 7, column 17 to column 20)",
                                                      " (in 'dfa', line 7, column 6 to column 29)",
                                                      " (in 'dfa', line 8, column 6 to column 18)",
                                                      " (in 'dfa', line 9, column 6 to column 18)",
                                                      " (in 'dfa', line 10, column 6 to column 18)",
                                                      " (in 'dfa', line 13, column 10 to column 32)",
                                                      " (in 'dfa', line 14, column 10 to column 22)",
                                                      " (in 'dfa', line 17, column 14 to column 36)",
                                                      " (in 'dfa', line 18, column 14 to column 49)",
                                                      " (in 'dfa', line 16, column 27 to line 19, column 13)",
                                                      " (in 'dfa', line 16, column 12 to line 19, column 13)",
                                                      " (in 'dfa', line 15, column 25 to line 20, column 11)",
                                                      " (in 'dfa', line 15, column 10 to line 20, column 11)",
                                                      " (in 'dfa', line 12, column 23 to line 21, column 9)",
                                                      " (in 'dfa', line 12, column 8 to line 21, column 9)",
                                                      " (in 'dfa', line 11, column 21 to line 22, column 7)",
                                                      " (in 'dfa', line 11, column 6 to line 22, column 7)",
                                                      " (in 'dfa', line 23, column 6 to column 20)",
                                                      " (in 'dfa', line 6, column 4 to line 24, column 5)",
                                                      " (in 'dfa', line 3, column 43 to line 25, column 3)",
                                                      " (in 'dfa', line 29, column 13 to column 16)",
                                                      " (in 'dfa', line 29, column 6 to column 27)",
                                                      " (in 'dfa', line 30, column 6 to column 18)",
                                                      " (in 'dfa', line 31, column 6 to column 18)",
                                                      " (in 'dfa', line 34, column 10 to column 32)",
                                                      " (in 'dfa', line 35, column 10 to column 41)",
                                                      " (in 'dfa', line 33, column 23 to line 36, column 9)",
                                                      " (in 'dfa', line 33, column 8 to line 36, column 9)",
                                                      " (in 'dfa', line 32, column 21 to line 37, column 7)",
                                                      " (in 'dfa', line 32, column 6 to line 37, column 7)",
                                                      " (in 'dfa', line 38, column 6 to column 20)",
                                                      " (in 'dfa', line 28, column 4 to line 39, column 5)",
                                                      " (in 'dfa', line 26, column 46 to line 40, column 3)",
                                                      " (in 'dfa', line 44, column 13 to column 16)",
                                                      " (in 'dfa', line 44, column 6 to column 27)",
                                                      " (in 'dfa', line 45, column 6 to column 18)",
                                                      " (in 'dfa', line 46, column 6 to column 18)",
                                                      " (in 'dfa', line 49, column 10 to column 32)",
                                                      " (in 'dfa', line 50, column 10 to column 35)",
                                                      " (in 'dfa', line 48, column 23 to line 51, column 9)",
                                                      " (in 'dfa', line 48, column 8 to line 51, column 9)",
                                                      " (in 'dfa', line 47, column 21 to line 52, column 7)",
                                                      " (in 'dfa', line 47, column 6 to line 52, column 7)",
                                                      " (in 'dfa', line 53, column 6 to column 20)",
                                                      " (in 'dfa', line 43, column 4 to line 54, column 5)",
                                                      " (in 'dfa', line 41, column 47 to line 55, column 3)"};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
subset(const T0__& x_arg__, const int& drop, const int& P,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    {
      current_statement__ = 637;
      validate_non_negative_index("result", "P - 1", (P - 1));
      current_statement__ = 638;
      validate_non_negative_index("result", "P - 1", (P - 1));
      Eigen::Matrix<local_scalar_t__, -1, -1> result;
      result = Eigen::Matrix<local_scalar_t__, -1, -1>((P - 1), (P - 1));
      stan::math::fill(result, DUMMY_VAR__);
      
      int rowindx;
      rowindx = std::numeric_limits<int>::min();
      
      int colindx;
      colindx = std::numeric_limits<int>::min();
      
      current_statement__ = 642;
      rowindx = 0;
      current_statement__ = 654;
      for (int i = 1; i <= P; ++i) {
        current_statement__ = 652;
        if (logical_neq(i, drop)) {
          current_statement__ = 643;
          rowindx = (rowindx + 1);
          current_statement__ = 644;
          colindx = 0;
          current_statement__ = 650;
          for (int j = 1; j <= P; ++j) {
            current_statement__ = 648;
            if (logical_neq(j, drop)) {
              current_statement__ = 645;
              colindx = (colindx + 1);
              current_statement__ = 646;
              assign(result,
                cons_list(index_uni(rowindx),
                  cons_list(index_uni(colindx), nil_index_list())),
                rvalue(x,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())), "x"),
                "assigning variable result");
            } }
        } }
      current_statement__ = 655;
      return result;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct subset_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& x, const int& drop, const int& P,
           std::ostream* pstream__)  const 
{
return subset(x, drop, P, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
subsetvec(const T0__& x_arg__, const int& drop, const int& P,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    {
      current_statement__ = 658;
      validate_non_negative_index("result", "P - 1", (P - 1));
      Eigen::Matrix<local_scalar_t__, -1, -1> result;
      result = Eigen::Matrix<local_scalar_t__, -1, -1>((P - 1), 1);
      stan::math::fill(result, DUMMY_VAR__);
      
      int rowindx;
      rowindx = std::numeric_limits<int>::min();
      
      current_statement__ = 661;
      rowindx = 0;
      current_statement__ = 667;
      for (int i = 1; i <= P; ++i) {
        current_statement__ = 665;
        if (logical_neq(i, drop)) {
          current_statement__ = 662;
          rowindx = (rowindx + 1);
          current_statement__ = 663;
          assign(result,
            cons_list(index_uni(rowindx),
              cons_list(index_uni(1), nil_index_list())),
            rvalue(x,
              cons_list(index_uni(i),
                cons_list(index_uni(drop), nil_index_list())), "x"),
            "assigning variable result");
        } }
      current_statement__ = 668;
      return result;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct subsetvec_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& x, const int& drop, const int& P,
           std::ostream* pstream__)  const 
{
return subsetvec(x, drop, P, pstream__);
}
};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
subsetvec2(const T0__& x_arg__, const int& drop, const int& P,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    {
      current_statement__ = 671;
      validate_non_negative_index("result", "P - 1", (P - 1));
      Eigen::Matrix<local_scalar_t__, -1, -1> result;
      result = Eigen::Matrix<local_scalar_t__, -1, -1>((P - 1), 1);
      stan::math::fill(result, DUMMY_VAR__);
      
      int rowindx;
      rowindx = std::numeric_limits<int>::min();
      
      current_statement__ = 674;
      rowindx = 0;
      current_statement__ = 680;
      for (int i = 1; i <= P; ++i) {
        current_statement__ = 678;
        if (logical_neq(i, drop)) {
          current_statement__ = 675;
          rowindx = (rowindx + 1);
          current_statement__ = 676;
          assign(result,
            cons_list(index_uni(rowindx),
              cons_list(index_uni(1), nil_index_list())), x[(i - 1)],
            "assigning variable result");
        } }
      current_statement__ = 681;
      return result;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct subsetvec2_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, -1>
operator()(const T0__& x, const int& drop, const int& P,
           std::ostream* pstream__)  const 
{
return subsetvec2(x, drop, P, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_dfa final : public model_base_crtp<model_dfa> {
private:
  int N;
  int P;
  int K;
  int nZ;
  std::vector<int> row_indx;
  std::vector<int> col_indx;
  int nVariances;
  std::vector<int> varIndx;
  int nZero;
  std::vector<int> row_indx_z;
  std::vector<int> col_indx_z;
  int n_pos;
  std::vector<int> row_indx_pos;
  std::vector<int> col_indx_pos;
  std::vector<double> y;
  std::vector<int> y_int;
  std::vector<double> offset;
  int n_na;
  std::vector<int> row_indx_na;
  std::vector<int> col_indx_na;
  double nu_fixed;
  int estimate_nu;
  int use_normal;
  int est_cor;
  int est_phi;
  int est_theta;
  int num_obs_covar;
  int n_obs_covar;
  std::vector<std::vector<int>> obs_covar_index;
  std::vector<double> obs_covar_value;
  std::vector<int> match_obs_covar;
  int num_pro_covar;
  int n_pro_covar;
  std::vector<std::vector<int>> pro_covar_index;
  std::vector<double> pro_covar_value;
  std::vector<double> z_bound;
  int long_format;
  int proportional_model;
  int est_sigma_process;
  int n_sigma_process;
  int est_rw;
  int est_spline;
  int est_gp;
  int n_knots;
  Eigen::Matrix<double, -1, -1> X_spline;
  std::vector<double> knot_locs;
  Eigen::Matrix<double, -1, -1> distKnots21_pred;
  int obs_model;
  int est_sigma_params;
  int est_gamma_params;
  int est_nb2_params;
  int use_expansion_prior;
  std::vector<double> gp_theta_prior;
  std::vector<double> weights_vec;
  int n_pcor;
  int n_loglik;
  Eigen::Matrix<double, -1, 1> zeros;
  std::vector<double> data_locs;
  std::vector<double> log_weights_vec;
  Eigen::Matrix<double, -1, 1> alpha_vec;
  Eigen::Matrix<double, -1, 1> muZeros;
  double gp_delta;
  double lower_bound_z;
  int devs_1dim__;
  int devs_2dim__;
  int psi_1dim__;
  int z_1dim__;
  int zpos_1dim__;
  int p_z_1dim__;
  int spline_a_1dim__;
  int spline_a_2dim__;
  int sigma_1dim__;
  int gamma_a_1dim__;
  int nb2_phi_1dim__;
  int phi_1dim__;
  int theta_1dim__;
  int gp_theta_1dim__;
  int sigma_process_1dim__;
  int effectsKnots_1dim__;
  int effectsKnots_2dim__;
  int sigma_vec_1dim__;
  int gamma_a_vec_1dim__;
  int nb_phi_vec_1dim__;
  int psi_root_1dim__;
  int Sigma_derived_1dim__;
  int Sigma_derived_2dim__;
  int Sigma_temp_1dim__;
  int Sigma_temp_2dim__;
  int sigma12_vec_1dim__;
  int temp_sums_1dim__;
  int temp_sums_2dim__;
  int temp_counts_1dim__;
  int temp_counts_2dim__;
  int cond_sigma_vec_1dim__;
  int cond_mean_vec_1dim__;
  int spline_a_trans_1dim__;
  int spline_a_trans_2dim__;
 
public:
  ~model_dfa() { }
  
  inline std::string model_name() const final { return "model_dfa"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_dfa(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_dfa_namespace::model_dfa";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 441;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 441;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 441;
      current_statement__ = 441;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 442;
      context__.validate_dims("data initialization","P","int",
          context__.to_vec());
      P = std::numeric_limits<int>::min();
      
      current_statement__ = 442;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 442;
      current_statement__ = 442;
      check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 443;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 443;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 443;
      current_statement__ = 443;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 444;
      context__.validate_dims("data initialization","nZ","int",
          context__.to_vec());
      nZ = std::numeric_limits<int>::min();
      
      current_statement__ = 444;
      nZ = context__.vals_i("nZ")[(1 - 1)];
      current_statement__ = 444;
      current_statement__ = 444;
      check_greater_or_equal(function__, "nZ", nZ, 0);
      current_statement__ = 445;
      validate_non_negative_index("row_indx", "nZ", nZ);
      current_statement__ = 446;
      context__.validate_dims("data initialization","row_indx","int",
          context__.to_vec(nZ));
      row_indx = std::vector<int>(nZ, std::numeric_limits<int>::min());
      
      current_statement__ = 446;
      assign(row_indx, nil_index_list(), context__.vals_i("row_indx"),
        "assigning variable row_indx");
      current_statement__ = 446;
      for (int sym1__ = 1; sym1__ <= nZ; ++sym1__) {
        current_statement__ = 446;
        current_statement__ = 446;
        check_greater_or_equal(function__, "row_indx[sym1__]",
                               row_indx[(sym1__ - 1)], 0);}
      current_statement__ = 447;
      validate_non_negative_index("col_indx", "nZ", nZ);
      current_statement__ = 448;
      context__.validate_dims("data initialization","col_indx","int",
          context__.to_vec(nZ));
      col_indx = std::vector<int>(nZ, std::numeric_limits<int>::min());
      
      current_statement__ = 448;
      assign(col_indx, nil_index_list(), context__.vals_i("col_indx"),
        "assigning variable col_indx");
      current_statement__ = 448;
      for (int sym1__ = 1; sym1__ <= nZ; ++sym1__) {
        current_statement__ = 448;
        current_statement__ = 448;
        check_greater_or_equal(function__, "col_indx[sym1__]",
                               col_indx[(sym1__ - 1)], 0);}
      current_statement__ = 449;
      context__.validate_dims("data initialization","nVariances","int",
          context__.to_vec());
      nVariances = std::numeric_limits<int>::min();
      
      current_statement__ = 449;
      nVariances = context__.vals_i("nVariances")[(1 - 1)];
      current_statement__ = 449;
      current_statement__ = 449;
      check_greater_or_equal(function__, "nVariances", nVariances, 0);
      current_statement__ = 450;
      validate_non_negative_index("varIndx", "P", P);
      current_statement__ = 451;
      context__.validate_dims("data initialization","varIndx","int",
          context__.to_vec(P));
      varIndx = std::vector<int>(P, std::numeric_limits<int>::min());
      
      current_statement__ = 451;
      assign(varIndx, nil_index_list(), context__.vals_i("varIndx"),
        "assigning variable varIndx");
      current_statement__ = 451;
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        current_statement__ = 451;
        current_statement__ = 451;
        check_greater_or_equal(function__, "varIndx[sym1__]",
                               varIndx[(sym1__ - 1)], 0);}
      current_statement__ = 452;
      context__.validate_dims("data initialization","nZero","int",
          context__.to_vec());
      nZero = std::numeric_limits<int>::min();
      
      current_statement__ = 452;
      nZero = context__.vals_i("nZero")[(1 - 1)];
      current_statement__ = 452;
      current_statement__ = 452;
      check_greater_or_equal(function__, "nZero", nZero, 0);
      current_statement__ = 453;
      validate_non_negative_index("row_indx_z", "nZero", nZero);
      current_statement__ = 454;
      context__.validate_dims("data initialization","row_indx_z","int",
          context__.to_vec(nZero));
      row_indx_z = std::vector<int>(nZero, std::numeric_limits<int>::min());
      
      current_statement__ = 454;
      assign(row_indx_z, nil_index_list(), context__.vals_i("row_indx_z"),
        "assigning variable row_indx_z");
      current_statement__ = 454;
      for (int sym1__ = 1; sym1__ <= nZero; ++sym1__) {
        current_statement__ = 454;
        current_statement__ = 454;
        check_greater_or_equal(function__, "row_indx_z[sym1__]",
                               row_indx_z[(sym1__ - 1)], 0);}
      current_statement__ = 455;
      validate_non_negative_index("col_indx_z", "nZero", nZero);
      current_statement__ = 456;
      context__.validate_dims("data initialization","col_indx_z","int",
          context__.to_vec(nZero));
      col_indx_z = std::vector<int>(nZero, std::numeric_limits<int>::min());
      
      current_statement__ = 456;
      assign(col_indx_z, nil_index_list(), context__.vals_i("col_indx_z"),
        "assigning variable col_indx_z");
      current_statement__ = 456;
      for (int sym1__ = 1; sym1__ <= nZero; ++sym1__) {
        current_statement__ = 456;
        current_statement__ = 456;
        check_greater_or_equal(function__, "col_indx_z[sym1__]",
                               col_indx_z[(sym1__ - 1)], 0);}
      current_statement__ = 457;
      context__.validate_dims("data initialization","n_pos","int",
          context__.to_vec());
      n_pos = std::numeric_limits<int>::min();
      
      current_statement__ = 457;
      n_pos = context__.vals_i("n_pos")[(1 - 1)];
      current_statement__ = 457;
      current_statement__ = 457;
      check_greater_or_equal(function__, "n_pos", n_pos, 0);
      current_statement__ = 458;
      validate_non_negative_index("row_indx_pos", "n_pos", n_pos);
      current_statement__ = 459;
      context__.validate_dims("data initialization","row_indx_pos","int",
          context__.to_vec(n_pos));
      row_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      
      current_statement__ = 459;
      assign(row_indx_pos, nil_index_list(),
        context__.vals_i("row_indx_pos"), "assigning variable row_indx_pos");
      current_statement__ = 459;
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        current_statement__ = 459;
        current_statement__ = 459;
        check_greater_or_equal(function__, "row_indx_pos[sym1__]",
                               row_indx_pos[(sym1__ - 1)], 0);}
      current_statement__ = 460;
      validate_non_negative_index("col_indx_pos", "n_pos", n_pos);
      current_statement__ = 461;
      context__.validate_dims("data initialization","col_indx_pos","int",
          context__.to_vec(n_pos));
      col_indx_pos = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      
      current_statement__ = 461;
      assign(col_indx_pos, nil_index_list(),
        context__.vals_i("col_indx_pos"), "assigning variable col_indx_pos");
      current_statement__ = 461;
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        current_statement__ = 461;
        current_statement__ = 461;
        check_greater_or_equal(function__, "col_indx_pos[sym1__]",
                               col_indx_pos[(sym1__ - 1)], 0);}
      current_statement__ = 462;
      validate_non_negative_index("y", "n_pos", n_pos);
      current_statement__ = 463;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(n_pos));
      y = std::vector<double>(n_pos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 463;
      assign(y, nil_index_list(), context__.vals_r("y"),
        "assigning variable y");
      current_statement__ = 464;
      validate_non_negative_index("y_int", "n_pos", n_pos);
      current_statement__ = 465;
      context__.validate_dims("data initialization","y_int","int",
          context__.to_vec(n_pos));
      y_int = std::vector<int>(n_pos, std::numeric_limits<int>::min());
      
      current_statement__ = 465;
      assign(y_int, nil_index_list(), context__.vals_i("y_int"),
        "assigning variable y_int");
      current_statement__ = 465;
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        current_statement__ = 465;
        current_statement__ = 465;
        check_greater_or_equal(function__, "y_int[sym1__]",
                               y_int[(sym1__ - 1)], 0);}
      current_statement__ = 466;
      validate_non_negative_index("offset", "n_pos", n_pos);
      current_statement__ = 467;
      context__.validate_dims("data initialization","offset","double",
          context__.to_vec(n_pos));
      offset = std::vector<double>(n_pos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 467;
      assign(offset, nil_index_list(), context__.vals_r("offset"),
        "assigning variable offset");
      current_statement__ = 468;
      context__.validate_dims("data initialization","n_na","int",
          context__.to_vec());
      n_na = std::numeric_limits<int>::min();
      
      current_statement__ = 468;
      n_na = context__.vals_i("n_na")[(1 - 1)];
      current_statement__ = 468;
      current_statement__ = 468;
      check_greater_or_equal(function__, "n_na", n_na, 0);
      current_statement__ = 469;
      validate_non_negative_index("row_indx_na", "n_na", n_na);
      current_statement__ = 470;
      context__.validate_dims("data initialization","row_indx_na","int",
          context__.to_vec(n_na));
      row_indx_na = std::vector<int>(n_na, std::numeric_limits<int>::min());
      
      current_statement__ = 470;
      assign(row_indx_na, nil_index_list(), context__.vals_i("row_indx_na"),
        "assigning variable row_indx_na");
      current_statement__ = 470;
      for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
        current_statement__ = 470;
        current_statement__ = 470;
        check_greater_or_equal(function__, "row_indx_na[sym1__]",
                               row_indx_na[(sym1__ - 1)], 0);}
      current_statement__ = 471;
      validate_non_negative_index("col_indx_na", "n_na", n_na);
      current_statement__ = 472;
      context__.validate_dims("data initialization","col_indx_na","int",
          context__.to_vec(n_na));
      col_indx_na = std::vector<int>(n_na, std::numeric_limits<int>::min());
      
      current_statement__ = 472;
      assign(col_indx_na, nil_index_list(), context__.vals_i("col_indx_na"),
        "assigning variable col_indx_na");
      current_statement__ = 472;
      for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
        current_statement__ = 472;
        current_statement__ = 472;
        check_greater_or_equal(function__, "col_indx_na[sym1__]",
                               col_indx_na[(sym1__ - 1)], 0);}
      current_statement__ = 473;
      context__.validate_dims("data initialization","nu_fixed","double",
          context__.to_vec());
      nu_fixed = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 473;
      nu_fixed = context__.vals_r("nu_fixed")[(1 - 1)];
      current_statement__ = 473;
      current_statement__ = 473;
      check_greater_or_equal(function__, "nu_fixed", nu_fixed, 1);
      current_statement__ = 474;
      context__.validate_dims("data initialization","estimate_nu","int",
          context__.to_vec());
      estimate_nu = std::numeric_limits<int>::min();
      
      current_statement__ = 474;
      estimate_nu = context__.vals_i("estimate_nu")[(1 - 1)];
      current_statement__ = 475;
      context__.validate_dims("data initialization","use_normal","int",
          context__.to_vec());
      use_normal = std::numeric_limits<int>::min();
      
      current_statement__ = 475;
      use_normal = context__.vals_i("use_normal")[(1 - 1)];
      current_statement__ = 476;
      context__.validate_dims("data initialization","est_cor","int",
          context__.to_vec());
      est_cor = std::numeric_limits<int>::min();
      
      current_statement__ = 476;
      est_cor = context__.vals_i("est_cor")[(1 - 1)];
      current_statement__ = 477;
      context__.validate_dims("data initialization","est_phi","int",
          context__.to_vec());
      est_phi = std::numeric_limits<int>::min();
      
      current_statement__ = 477;
      est_phi = context__.vals_i("est_phi")[(1 - 1)];
      current_statement__ = 478;
      context__.validate_dims("data initialization","est_theta","int",
          context__.to_vec());
      est_theta = std::numeric_limits<int>::min();
      
      current_statement__ = 478;
      est_theta = context__.vals_i("est_theta")[(1 - 1)];
      current_statement__ = 479;
      context__.validate_dims("data initialization","num_obs_covar","int",
          context__.to_vec());
      num_obs_covar = std::numeric_limits<int>::min();
      
      current_statement__ = 479;
      num_obs_covar = context__.vals_i("num_obs_covar")[(1 - 1)];
      current_statement__ = 479;
      current_statement__ = 479;
      check_greater_or_equal(function__, "num_obs_covar", num_obs_covar, 0);
      current_statement__ = 480;
      context__.validate_dims("data initialization","n_obs_covar","int",
          context__.to_vec());
      n_obs_covar = std::numeric_limits<int>::min();
      
      current_statement__ = 480;
      n_obs_covar = context__.vals_i("n_obs_covar")[(1 - 1)];
      current_statement__ = 480;
      current_statement__ = 480;
      check_greater_or_equal(function__, "n_obs_covar", n_obs_covar, 0);
      current_statement__ = 481;
      validate_non_negative_index("obs_covar_index", "num_obs_covar",
                                  num_obs_covar);
      current_statement__ = 482;
      context__.validate_dims("data initialization","obs_covar_index","int",
          context__.to_vec(num_obs_covar, 3));
      obs_covar_index = std::vector<std::vector<int>>(num_obs_covar, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> obs_covar_index_flat__;
        current_statement__ = 482;
        assign(obs_covar_index_flat__, nil_index_list(),
          context__.vals_i("obs_covar_index"),
          "assigning variable obs_covar_index_flat__");
        current_statement__ = 482;
        pos__ = 1;
        current_statement__ = 482;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 482;
          for (int sym2__ = 1; sym2__ <= num_obs_covar; ++sym2__) {
            current_statement__ = 482;
            assign(obs_covar_index,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              obs_covar_index_flat__[(pos__ - 1)],
              "assigning variable obs_covar_index");
            current_statement__ = 482;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 483;
      validate_non_negative_index("obs_covar_value", "num_obs_covar",
                                  num_obs_covar);
      current_statement__ = 484;
      context__.validate_dims("data initialization","obs_covar_value",
          "double",context__.to_vec(num_obs_covar));
      obs_covar_value = std::vector<double>(num_obs_covar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 484;
      assign(obs_covar_value, nil_index_list(),
        context__.vals_r("obs_covar_value"),
        "assigning variable obs_covar_value");
      current_statement__ = 485;
      validate_non_negative_index("match_obs_covar", "num_obs_covar",
                                  num_obs_covar);
      current_statement__ = 486;
      context__.validate_dims("data initialization","match_obs_covar","int",
          context__.to_vec(num_obs_covar));
      match_obs_covar = std::vector<int>(num_obs_covar, std::numeric_limits<int>::min());
      
      current_statement__ = 486;
      assign(match_obs_covar, nil_index_list(),
        context__.vals_i("match_obs_covar"),
        "assigning variable match_obs_covar");
      current_statement__ = 487;
      context__.validate_dims("data initialization","num_pro_covar","int",
          context__.to_vec());
      num_pro_covar = std::numeric_limits<int>::min();
      
      current_statement__ = 487;
      num_pro_covar = context__.vals_i("num_pro_covar")[(1 - 1)];
      current_statement__ = 487;
      current_statement__ = 487;
      check_greater_or_equal(function__, "num_pro_covar", num_pro_covar, 0);
      current_statement__ = 488;
      context__.validate_dims("data initialization","n_pro_covar","int",
          context__.to_vec());
      n_pro_covar = std::numeric_limits<int>::min();
      
      current_statement__ = 488;
      n_pro_covar = context__.vals_i("n_pro_covar")[(1 - 1)];
      current_statement__ = 488;
      current_statement__ = 488;
      check_greater_or_equal(function__, "n_pro_covar", n_pro_covar, 0);
      current_statement__ = 489;
      validate_non_negative_index("pro_covar_index", "num_pro_covar",
                                  num_pro_covar);
      current_statement__ = 490;
      context__.validate_dims("data initialization","pro_covar_index","int",
          context__.to_vec(num_pro_covar, 3));
      pro_covar_index = std::vector<std::vector<int>>(num_pro_covar, std::vector<int>(3, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> pro_covar_index_flat__;
        current_statement__ = 490;
        assign(pro_covar_index_flat__, nil_index_list(),
          context__.vals_i("pro_covar_index"),
          "assigning variable pro_covar_index_flat__");
        current_statement__ = 490;
        pos__ = 1;
        current_statement__ = 490;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 490;
          for (int sym2__ = 1; sym2__ <= num_pro_covar; ++sym2__) {
            current_statement__ = 490;
            assign(pro_covar_index,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              pro_covar_index_flat__[(pos__ - 1)],
              "assigning variable pro_covar_index");
            current_statement__ = 490;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 491;
      validate_non_negative_index("pro_covar_value", "num_pro_covar",
                                  num_pro_covar);
      current_statement__ = 492;
      context__.validate_dims("data initialization","pro_covar_value",
          "double",context__.to_vec(num_pro_covar));
      pro_covar_value = std::vector<double>(num_pro_covar, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 492;
      assign(pro_covar_value, nil_index_list(),
        context__.vals_r("pro_covar_value"),
        "assigning variable pro_covar_value");
      current_statement__ = 493;
      context__.validate_dims("data initialization","z_bound","double",
          context__.to_vec(2));
      z_bound = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 493;
      assign(z_bound, nil_index_list(), context__.vals_r("z_bound"),
        "assigning variable z_bound");
      current_statement__ = 494;
      context__.validate_dims("data initialization","long_format","int",
          context__.to_vec());
      long_format = std::numeric_limits<int>::min();
      
      current_statement__ = 494;
      long_format = context__.vals_i("long_format")[(1 - 1)];
      current_statement__ = 494;
      current_statement__ = 494;
      check_greater_or_equal(function__, "long_format", long_format, 0);
      current_statement__ = 495;
      context__.validate_dims("data initialization","proportional_model",
          "int",context__.to_vec());
      proportional_model = std::numeric_limits<int>::min();
      
      current_statement__ = 495;
      proportional_model = context__.vals_i("proportional_model")[(1 - 1)];
      current_statement__ = 495;
      current_statement__ = 495;
      check_greater_or_equal(function__, "proportional_model",
                             proportional_model, 0);
      current_statement__ = 496;
      context__.validate_dims("data initialization","est_sigma_process",
          "int",context__.to_vec());
      est_sigma_process = std::numeric_limits<int>::min();
      
      current_statement__ = 496;
      est_sigma_process = context__.vals_i("est_sigma_process")[(1 - 1)];
      current_statement__ = 496;
      current_statement__ = 496;
      check_greater_or_equal(function__, "est_sigma_process",
                             est_sigma_process, 0);
      current_statement__ = 497;
      context__.validate_dims("data initialization","n_sigma_process","int",
          context__.to_vec());
      n_sigma_process = std::numeric_limits<int>::min();
      
      current_statement__ = 497;
      n_sigma_process = context__.vals_i("n_sigma_process")[(1 - 1)];
      current_statement__ = 497;
      current_statement__ = 497;
      check_greater_or_equal(function__, "n_sigma_process", n_sigma_process,
                             0);
      current_statement__ = 498;
      context__.validate_dims("data initialization","est_rw","int",
          context__.to_vec());
      est_rw = std::numeric_limits<int>::min();
      
      current_statement__ = 498;
      est_rw = context__.vals_i("est_rw")[(1 - 1)];
      current_statement__ = 498;
      current_statement__ = 498;
      check_greater_or_equal(function__, "est_rw", est_rw, 0);
      current_statement__ = 499;
      context__.validate_dims("data initialization","est_spline","int",
          context__.to_vec());
      est_spline = std::numeric_limits<int>::min();
      
      current_statement__ = 499;
      est_spline = context__.vals_i("est_spline")[(1 - 1)];
      current_statement__ = 499;
      current_statement__ = 499;
      check_greater_or_equal(function__, "est_spline", est_spline, 0);
      current_statement__ = 500;
      context__.validate_dims("data initialization","est_gp","int",
          context__.to_vec());
      est_gp = std::numeric_limits<int>::min();
      
      current_statement__ = 500;
      est_gp = context__.vals_i("est_gp")[(1 - 1)];
      current_statement__ = 500;
      current_statement__ = 500;
      check_greater_or_equal(function__, "est_gp", est_gp, 0);
      current_statement__ = 501;
      context__.validate_dims("data initialization","n_knots","int",
          context__.to_vec());
      n_knots = std::numeric_limits<int>::min();
      
      current_statement__ = 501;
      n_knots = context__.vals_i("n_knots")[(1 - 1)];
      current_statement__ = 501;
      current_statement__ = 501;
      check_greater_or_equal(function__, "n_knots", n_knots, 0);
      current_statement__ = 502;
      validate_non_negative_index("X_spline", "N", N);
      current_statement__ = 503;
      validate_non_negative_index("X_spline", "n_knots", n_knots);
      current_statement__ = 504;
      context__.validate_dims("data initialization","X_spline","double",
          context__.to_vec(N, n_knots));
      X_spline = Eigen::Matrix<double, -1, -1>(N, n_knots);
      stan::math::fill(X_spline, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_spline_flat__;
        current_statement__ = 504;
        assign(X_spline_flat__, nil_index_list(),
          context__.vals_r("X_spline"), "assigning variable X_spline_flat__");
        current_statement__ = 504;
        pos__ = 1;
        current_statement__ = 504;
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          current_statement__ = 504;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 504;
            assign(X_spline,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_spline_flat__[(pos__ - 1)], "assigning variable X_spline");
            current_statement__ = 504;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 505;
      validate_non_negative_index("knot_locs", "n_knots", n_knots);
      current_statement__ = 506;
      context__.validate_dims("data initialization","knot_locs","double",
          context__.to_vec(n_knots));
      knot_locs = std::vector<double>(n_knots, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 506;
      assign(knot_locs, nil_index_list(), context__.vals_r("knot_locs"),
        "assigning variable knot_locs");
      current_statement__ = 507;
      validate_non_negative_index("distKnots21_pred", "n_knots", n_knots);
      current_statement__ = 508;
      context__.validate_dims("data initialization","distKnots21_pred",
          "double",context__.to_vec(1, n_knots));
      distKnots21_pred = Eigen::Matrix<double, -1, -1>(1, n_knots);
      stan::math::fill(distKnots21_pred, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> distKnots21_pred_flat__;
        current_statement__ = 508;
        assign(distKnots21_pred_flat__, nil_index_list(),
          context__.vals_r("distKnots21_pred"),
          "assigning variable distKnots21_pred_flat__");
        current_statement__ = 508;
        pos__ = 1;
        current_statement__ = 508;
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          current_statement__ = 508;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 508;
            assign(distKnots21_pred,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              distKnots21_pred_flat__[(pos__ - 1)],
              "assigning variable distKnots21_pred");
            current_statement__ = 508;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 509;
      context__.validate_dims("data initialization","obs_model","int",
          context__.to_vec());
      obs_model = std::numeric_limits<int>::min();
      
      current_statement__ = 509;
      obs_model = context__.vals_i("obs_model")[(1 - 1)];
      current_statement__ = 510;
      context__.validate_dims("data initialization","est_sigma_params","int",
          context__.to_vec());
      est_sigma_params = std::numeric_limits<int>::min();
      
      current_statement__ = 510;
      est_sigma_params = context__.vals_i("est_sigma_params")[(1 - 1)];
      current_statement__ = 510;
      current_statement__ = 510;
      check_greater_or_equal(function__, "est_sigma_params",
                             est_sigma_params, 0);
      current_statement__ = 510;
      current_statement__ = 510;
      check_less_or_equal(function__, "est_sigma_params", est_sigma_params, 1);
      current_statement__ = 511;
      context__.validate_dims("data initialization","est_gamma_params","int",
          context__.to_vec());
      est_gamma_params = std::numeric_limits<int>::min();
      
      current_statement__ = 511;
      est_gamma_params = context__.vals_i("est_gamma_params")[(1 - 1)];
      current_statement__ = 511;
      current_statement__ = 511;
      check_greater_or_equal(function__, "est_gamma_params",
                             est_gamma_params, 0);
      current_statement__ = 511;
      current_statement__ = 511;
      check_less_or_equal(function__, "est_gamma_params", est_gamma_params, 1);
      current_statement__ = 512;
      context__.validate_dims("data initialization","est_nb2_params","int",
          context__.to_vec());
      est_nb2_params = std::numeric_limits<int>::min();
      
      current_statement__ = 512;
      est_nb2_params = context__.vals_i("est_nb2_params")[(1 - 1)];
      current_statement__ = 512;
      current_statement__ = 512;
      check_greater_or_equal(function__, "est_nb2_params", est_nb2_params, 0);
      current_statement__ = 512;
      current_statement__ = 512;
      check_less_or_equal(function__, "est_nb2_params", est_nb2_params, 1);
      current_statement__ = 513;
      context__.validate_dims("data initialization","use_expansion_prior",
          "int",context__.to_vec());
      use_expansion_prior = std::numeric_limits<int>::min();
      
      current_statement__ = 513;
      use_expansion_prior = context__.vals_i("use_expansion_prior")[(1 - 1)];
      current_statement__ = 513;
      current_statement__ = 513;
      check_greater_or_equal(function__, "use_expansion_prior",
                             use_expansion_prior, 0);
      current_statement__ = 513;
      current_statement__ = 513;
      check_less_or_equal(function__, "use_expansion_prior",
                          use_expansion_prior, 1);
      current_statement__ = 514;
      context__.validate_dims("data initialization","gp_theta_prior",
          "double",context__.to_vec(2));
      gp_theta_prior = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 514;
      assign(gp_theta_prior, nil_index_list(),
        context__.vals_r("gp_theta_prior"),
        "assigning variable gp_theta_prior");
      current_statement__ = 515;
      validate_non_negative_index("weights_vec", "n_pos", n_pos);
      current_statement__ = 516;
      context__.validate_dims("data initialization","weights_vec","double",
          context__.to_vec(n_pos));
      weights_vec = std::vector<double>(n_pos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 516;
      assign(weights_vec, nil_index_list(), context__.vals_r("weights_vec"),
        "assigning variable weights_vec");
      current_statement__ = 517;
      n_pcor = std::numeric_limits<int>::min();
      
      current_statement__ = 518;
      n_loglik = std::numeric_limits<int>::min();
      
      current_statement__ = 519;
      validate_non_negative_index("zeros", "K", K);
      current_statement__ = 520;
      zeros = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(zeros, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 521;
      validate_non_negative_index("data_locs", "N", N);
      current_statement__ = 522;
      data_locs = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 523;
      validate_non_negative_index("log_weights_vec", "n_pos", n_pos);
      current_statement__ = 524;
      log_weights_vec = std::vector<double>(n_pos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 525;
      validate_non_negative_index("alpha_vec", "K * proportional_model",
                                  (K * proportional_model));
      current_statement__ = 526;
      alpha_vec = Eigen::Matrix<double, -1, 1>((K * proportional_model));
      stan::math::fill(alpha_vec, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 527;
      validate_non_negative_index("muZeros", "n_knots", n_knots);
      current_statement__ = 528;
      muZeros = Eigen::Matrix<double, -1, 1>(n_knots);
      stan::math::fill(muZeros, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 529;
      gp_delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 529;
      gp_delta = 1e-9;
      current_statement__ = 530;
      lower_bound_z = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 533;
      for (int i = 1; i <= n_pos; ++i) {
        current_statement__ = 531;
        assign(log_weights_vec, cons_list(index_uni(i), nil_index_list()),
          stan::math::log(weights_vec[(i - 1)]),
          "assigning variable log_weights_vec");}
      current_statement__ = 536;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 534;
        assign(data_locs, cons_list(index_uni(i), nil_index_list()), i,
          "assigning variable data_locs");}
      current_statement__ = 539;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 537;
        assign(zeros, cons_list(index_uni(k), nil_index_list()), 0,
          "assigning variable zeros");}
      current_statement__ = 542;
      for (int k = 1; k <= n_knots; ++k) {
        current_statement__ = 540;
        assign(muZeros, cons_list(index_uni(k), nil_index_list()), 0,
          "assigning variable muZeros");}
      current_statement__ = 543;
      n_loglik = n_pos;
      current_statement__ = 550;
      if (logical_eq(long_format, 0)) {
        current_statement__ = 548;
        if (logical_eq(est_cor, 0)) {
          current_statement__ = 546;
          n_loglik = (P * N);
        } else {
          current_statement__ = 544;
          n_loglik = N;
        }
      } 
      current_statement__ = 558;
      if (logical_eq(est_cor, 0)) {
        current_statement__ = 553;
        n_pcor = P;
        current_statement__ = 556;
        if (logical_lt(nVariances, 2)) {
          current_statement__ = 554;
          n_pcor = 2;
        } 
      } else {
        current_statement__ = 551;
        n_pcor = P;
      }
      current_statement__ = 562;
      if (logical_eq(proportional_model, 1)) {
        current_statement__ = 560;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 559;
          assign(alpha_vec, cons_list(index_uni(k), nil_index_list()), 1,
            "assigning variable alpha_vec");}
      } 
      current_statement__ = 563;
      lower_bound_z = -100;
      current_statement__ = 565;
      if (logical_eq(use_expansion_prior, 1)) {
        current_statement__ = 564;
        lower_bound_z = 0;
      } 
      current_statement__ = 566;
      devs_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 566;
      devs_1dim__ = (K * est_rw);
      current_statement__ = 566;
      validate_non_negative_index("devs", "K * est_rw", devs_1dim__);
      current_statement__ = 567;
      devs_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 567;
      devs_2dim__ = ((N - 1) * est_rw);
      current_statement__ = 567;
      validate_non_negative_index("devs", "(N - 1) * est_rw", devs_2dim__);
      current_statement__ = 568;
      validate_non_negative_index("x0", "K", K);
      current_statement__ = 569;
      psi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 569;
      psi_1dim__ = ((K * (1 - proportional_model)) * use_expansion_prior);
      current_statement__ = 569;
      validate_non_negative_index("psi",
                                  "K * (1 - proportional_model) * use_expansion_prior",
                                  psi_1dim__);
      current_statement__ = 570;
      z_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 570;
      z_1dim__ = (nZ * (1 - proportional_model));
      current_statement__ = 570;
      validate_non_negative_index("z", "nZ * (1 - proportional_model)",
                                  z_1dim__);
      current_statement__ = 571;
      zpos_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 571;
      zpos_1dim__ = (K * (1 - proportional_model));
      current_statement__ = 571;
      validate_non_negative_index("zpos", "K * (1 - proportional_model)",
                                  zpos_1dim__);
      current_statement__ = 572;
      p_z_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 572;
      p_z_1dim__ = (P * proportional_model);
      current_statement__ = 572;
      validate_non_negative_index("p_z", "P * proportional_model", p_z_1dim__);
      current_statement__ = 573;
      validate_positive_index("p_z", "K", K);
      current_statement__ = 574;
      spline_a_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 574;
      spline_a_1dim__ = (K * est_spline);
      current_statement__ = 574;
      validate_non_negative_index("spline_a", "K * est_spline",
                                  spline_a_1dim__);
      current_statement__ = 575;
      spline_a_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 575;
      spline_a_2dim__ = (n_knots * est_spline);
      current_statement__ = 575;
      validate_non_negative_index("spline_a", "n_knots * est_spline",
                                  spline_a_2dim__);
      current_statement__ = 576;
      validate_non_negative_index("b_obs", "n_obs_covar", n_obs_covar);
      current_statement__ = 577;
      validate_non_negative_index("b_obs", "P", P);
      current_statement__ = 578;
      validate_non_negative_index("b_pro", "n_pro_covar", n_pro_covar);
      current_statement__ = 579;
      validate_non_negative_index("b_pro", "K", K);
      current_statement__ = 580;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 580;
      sigma_1dim__ = (nVariances * est_sigma_params);
      current_statement__ = 580;
      validate_non_negative_index("sigma", "nVariances * est_sigma_params",
                                  sigma_1dim__);
      current_statement__ = 581;
      gamma_a_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 581;
      gamma_a_1dim__ = (nVariances * est_gamma_params);
      current_statement__ = 581;
      validate_non_negative_index("gamma_a", "nVariances * est_gamma_params",
                                  gamma_a_1dim__);
      current_statement__ = 582;
      nb2_phi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 582;
      nb2_phi_1dim__ = (nVariances * est_nb2_params);
      current_statement__ = 582;
      validate_non_negative_index("nb2_phi", "nVariances * est_nb2_params",
                                  nb2_phi_1dim__);
      current_statement__ = 583;
      validate_non_negative_index("nu", "estimate_nu", estimate_nu);
      current_statement__ = 584;
      validate_non_negative_index("ymiss", "n_na", n_na);
      current_statement__ = 585;
      phi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 585;
      phi_1dim__ = (est_phi * K);
      current_statement__ = 585;
      validate_non_negative_index("phi", "est_phi * K", phi_1dim__);
      current_statement__ = 586;
      theta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 586;
      theta_1dim__ = (est_theta * K);
      current_statement__ = 586;
      validate_non_negative_index("theta", "est_theta * K", theta_1dim__);
      current_statement__ = 587;
      gp_theta_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 587;
      gp_theta_1dim__ = (est_gp * K);
      current_statement__ = 587;
      validate_non_negative_index("gp_theta", "est_gp * K", gp_theta_1dim__);
      current_statement__ = 588;
      validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
      current_statement__ = 588;
      validate_non_negative_index("Lcorr", "n_pcor", n_pcor);
      current_statement__ = 589;
      sigma_process_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 589;
      sigma_process_1dim__ = (est_sigma_process * n_sigma_process);
      current_statement__ = 589;
      validate_non_negative_index("sigma_process",
                                  "est_sigma_process * n_sigma_process",
                                  sigma_process_1dim__);
      current_statement__ = 590;
      effectsKnots_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 590;
      effectsKnots_1dim__ = (K * est_gp);
      current_statement__ = 590;
      validate_non_negative_index("effectsKnots", "K * est_gp",
                                  effectsKnots_1dim__);
      current_statement__ = 591;
      effectsKnots_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 591;
      effectsKnots_2dim__ = (n_knots * est_gp);
      current_statement__ = 591;
      validate_non_negative_index("effectsKnots", "n_knots * est_gp",
                                  effectsKnots_2dim__);
      current_statement__ = 592;
      validate_non_negative_index("pred", "P", P);
      current_statement__ = 593;
      validate_non_negative_index("pred", "N", N);
      current_statement__ = 594;
      validate_non_negative_index("Z", "P", P);
      current_statement__ = 595;
      validate_non_negative_index("Z", "K", K);
      current_statement__ = 596;
      validate_non_negative_index("yall", "P", P);
      current_statement__ = 597;
      validate_non_negative_index("yall", "N", N);
      current_statement__ = 598;
      sigma_vec_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 598;
      sigma_vec_1dim__ = (P * est_sigma_params);
      current_statement__ = 598;
      validate_non_negative_index("sigma_vec", "P * est_sigma_params",
                                  sigma_vec_1dim__);
      current_statement__ = 599;
      gamma_a_vec_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 599;
      gamma_a_vec_1dim__ = (P * est_gamma_params);
      current_statement__ = 599;
      validate_non_negative_index("gamma_a_vec", "P * est_gamma_params",
                                  gamma_a_vec_1dim__);
      current_statement__ = 600;
      nb_phi_vec_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 600;
      nb_phi_vec_1dim__ = (P * est_nb2_params);
      current_statement__ = 600;
      validate_non_negative_index("nb_phi_vec", "P * est_nb2_params",
                                  nb_phi_vec_1dim__);
      current_statement__ = 601;
      validate_non_negative_index("phi_vec", "K", K);
      current_statement__ = 602;
      validate_non_negative_index("theta_vec", "K", K);
      current_statement__ = 603;
      validate_non_negative_index("x", "K", K);
      current_statement__ = 604;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 605;
      validate_non_negative_index("indicator", "K", K);
      current_statement__ = 606;
      psi_root_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 606;
      psi_root_1dim__ = (K * use_expansion_prior);
      current_statement__ = 606;
      validate_non_negative_index("psi_root", "K * use_expansion_prior",
                                  psi_root_1dim__);
      current_statement__ = 607;
      Sigma_derived_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 607;
      Sigma_derived_1dim__ = ((n_pcor * long_format) * est_cor);
      current_statement__ = 607;
      validate_non_negative_index("Sigma_derived",
                                  "n_pcor * long_format * est_cor",
                                  Sigma_derived_1dim__);
      current_statement__ = 608;
      Sigma_derived_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 608;
      Sigma_derived_2dim__ = ((n_pcor * long_format) * est_cor);
      current_statement__ = 608;
      validate_non_negative_index("Sigma_derived",
                                  "n_pcor * long_format * est_cor",
                                  Sigma_derived_2dim__);
      current_statement__ = 609;
      Sigma_temp_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 609;
      Sigma_temp_1dim__ = (((n_pcor - 1) * long_format) * est_cor);
      current_statement__ = 609;
      validate_non_negative_index("Sigma_temp",
                                  "(n_pcor - 1) * long_format * est_cor",
                                  Sigma_temp_1dim__);
      current_statement__ = 610;
      Sigma_temp_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 610;
      Sigma_temp_2dim__ = (((n_pcor - 1) * long_format) * est_cor);
      current_statement__ = 610;
      validate_non_negative_index("Sigma_temp",
                                  "(n_pcor - 1) * long_format * est_cor",
                                  Sigma_temp_2dim__);
      current_statement__ = 611;
      sigma12_vec_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 611;
      sigma12_vec_1dim__ = (n_pcor - 1);
      current_statement__ = 611;
      validate_non_negative_index("sigma12_vec", "n_pcor - 1",
                                  sigma12_vec_1dim__);
      current_statement__ = 612;
      validate_non_negative_index("sigma12_vec", "1", 1);
      current_statement__ = 613;
      temp_sums_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 613;
      temp_sums_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 613;
      validate_non_negative_index("temp_sums", "P * long_format * est_cor",
                                  temp_sums_1dim__);
      current_statement__ = 614;
      temp_sums_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 614;
      temp_sums_2dim__ = ((N * long_format) * est_cor);
      current_statement__ = 614;
      validate_non_negative_index("temp_sums", "N * long_format * est_cor",
                                  temp_sums_2dim__);
      current_statement__ = 615;
      temp_counts_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 615;
      temp_counts_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 615;
      validate_non_negative_index("temp_counts", "P * long_format * est_cor",
                                  temp_counts_1dim__);
      current_statement__ = 616;
      temp_counts_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 616;
      temp_counts_2dim__ = ((N * long_format) * est_cor);
      current_statement__ = 616;
      validate_non_negative_index("temp_counts", "N * long_format * est_cor",
                                  temp_counts_2dim__);
      current_statement__ = 617;
      cond_sigma_vec_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 617;
      cond_sigma_vec_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 617;
      validate_non_negative_index("cond_sigma_vec",
                                  "P * long_format * est_cor",
                                  cond_sigma_vec_1dim__);
      current_statement__ = 618;
      cond_mean_vec_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 618;
      cond_mean_vec_1dim__ = ((P * long_format) * est_cor);
      current_statement__ = 618;
      validate_non_negative_index("cond_mean_vec",
                                  "P * long_format * est_cor",
                                  cond_mean_vec_1dim__);
      current_statement__ = 619;
      validate_non_negative_index("sigma_pro", "K", K);
      current_statement__ = 620;
      spline_a_trans_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 620;
      spline_a_trans_1dim__ = (K * est_spline);
      current_statement__ = 620;
      validate_non_negative_index("spline_a_trans", "K * est_spline",
                                  spline_a_trans_1dim__);
      current_statement__ = 621;
      spline_a_trans_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 621;
      spline_a_trans_2dim__ = (n_knots * est_spline);
      current_statement__ = 621;
      validate_non_negative_index("spline_a_trans", "n_knots * est_spline",
                                  spline_a_trans_2dim__);
      current_statement__ = 622;
      validate_non_negative_index("SigmaKnots", "K", K);
      current_statement__ = 623;
      validate_non_negative_index("SigmaKnots", "n_knots", n_knots);
      current_statement__ = 624;
      validate_non_negative_index("SigmaKnots", "n_knots", n_knots);
      current_statement__ = 625;
      validate_non_negative_index("obs_cov_offset", "n_pos", n_pos);
      current_statement__ = 626;
      validate_non_negative_index("log_lik", "n_loglik", n_loglik);
      current_statement__ = 627;
      validate_non_negative_index("Omega", "n_pcor", n_pcor);
      current_statement__ = 628;
      validate_non_negative_index("Omega", "n_pcor", n_pcor);
      current_statement__ = 629;
      validate_non_negative_index("Sigma", "n_pcor", n_pcor);
      current_statement__ = 630;
      validate_non_negative_index("Sigma", "n_pcor", n_pcor);
      current_statement__ = 631;
      validate_non_negative_index("xstar", "K", K);
      current_statement__ = 632;
      validate_non_negative_index("xstar", "1", 1);
      current_statement__ = 633;
      validate_non_negative_index("future_devs", "K", K);
      current_statement__ = 634;
      validate_non_negative_index("SigmaKnots_pred", "n_knots", n_knots);
      current_statement__ = 635;
      validate_non_negative_index("SigmaKnots_pred", "n_knots", n_knots);
      current_statement__ = 636;
      validate_non_negative_index("SigmaOffDiag_pred", "n_knots", n_knots);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += devs_1dim__ * devs_2dim__;
      num_params_r__ += K;
      num_params_r__ += psi_1dim__;
      num_params_r__ += z_1dim__;
      num_params_r__ += zpos_1dim__;
      num_params_r__ += p_z_1dim__ * (K - 1);
      num_params_r__ += spline_a_1dim__ * spline_a_2dim__;
      num_params_r__ += n_obs_covar * P;
      num_params_r__ += n_pro_covar * K;
      num_params_r__ += sigma_1dim__;
      num_params_r__ += gamma_a_1dim__;
      num_params_r__ += nb2_phi_1dim__;
      num_params_r__ += estimate_nu;
      num_params_r__ += n_na;
      num_params_r__ += phi_1dim__;
      num_params_r__ += theta_1dim__;
      num_params_r__ += gp_theta_1dim__;
      num_params_r__ += ((n_pcor * (n_pcor - 1)) / 2);
      num_params_r__ += sigma_process_1dim__;
      num_params_r__ += effectsKnots_1dim__ * effectsKnots_2dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_dfa_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> devs;
      devs = Eigen::Matrix<local_scalar_t__, -1, -1>(devs_1dim__, devs_2dim__);
      stan::math::fill(devs, DUMMY_VAR__);
      
      current_statement__ = 1;
      devs = in__.matrix(devs_1dim__, devs_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> x0;
      x0 = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(x0, DUMMY_VAR__);
      
      current_statement__ = 2;
      x0 = in__.vector(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi;
      psi = Eigen::Matrix<local_scalar_t__, -1, 1>(psi_1dim__);
      stan::math::fill(psi, DUMMY_VAR__);
      
      current_statement__ = 3;
      psi = in__.vector(psi_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(psi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(psi[(sym1__ - 1)], 0, lp__),
            "assigning variable psi");
        } else {
          current_statement__ = 3;
          assign(psi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(psi[(sym1__ - 1)], 0),
            "assigning variable psi");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> z;
      z = Eigen::Matrix<local_scalar_t__, -1, 1>(z_1dim__);
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 4;
      z = in__.vector(z_1dim__);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(z[(sym1__ - 1)], z_bound[(1 - 1)],
              z_bound[(2 - 1)], lp__), "assigning variable z");
        } else {
          current_statement__ = 4;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(z[(sym1__ - 1)], z_bound[(1 - 1)],
              z_bound[(2 - 1)]), "assigning variable z");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> zpos;
      zpos = Eigen::Matrix<local_scalar_t__, -1, 1>(zpos_1dim__);
      stan::math::fill(zpos, DUMMY_VAR__);
      
      current_statement__ = 5;
      zpos = in__.vector(zpos_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(zpos, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(zpos[(sym1__ - 1)], lower_bound_z, lp__),
            "assigning variable zpos");
        } else {
          current_statement__ = 5;
          assign(zpos, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(zpos[(sym1__ - 1)], lower_bound_z),
            "assigning variable zpos");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_z;
      p_z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(p_z_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(K));
      stan::math::fill(p_z, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_z_in__;
      p_z_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(p_z_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (K - 1)));
      stan::math::fill(p_z_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= p_z_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(p_z_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((K - 1)), "assigning variable p_z_in__");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= p_z_1dim__; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(p_z, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(p_z_in__[(sym1__ - 1)], lp__),
            "assigning variable p_z");
        } else {
          current_statement__ = 6;
          assign(p_z, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(p_z_in__[(sym1__ - 1)]),
            "assigning variable p_z");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> spline_a;
      spline_a = Eigen::Matrix<local_scalar_t__, -1, -1>(spline_a_1dim__, spline_a_2dim__);
      stan::math::fill(spline_a, DUMMY_VAR__);
      
      current_statement__ = 7;
      spline_a = in__.matrix(spline_a_1dim__, spline_a_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> b_obs;
      b_obs = Eigen::Matrix<local_scalar_t__, -1, -1>(n_obs_covar, P);
      stan::math::fill(b_obs, DUMMY_VAR__);
      
      current_statement__ = 8;
      b_obs = in__.matrix(n_obs_covar, P);
      Eigen::Matrix<local_scalar_t__, -1, -1> b_pro;
      b_pro = Eigen::Matrix<local_scalar_t__, -1, -1>(n_pro_covar, K);
      stan::math::fill(b_pro, DUMMY_VAR__);
      
      current_statement__ = 9;
      b_pro = in__.matrix(n_pro_covar, K);
      std::vector<local_scalar_t__> sigma;
      sigma = std::vector<local_scalar_t__>(sigma_1dim__, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 10;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      std::vector<local_scalar_t__> gamma_a;
      gamma_a = std::vector<local_scalar_t__>(gamma_a_1dim__, DUMMY_VAR__);
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(gamma_a, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable gamma_a");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(gamma_a, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gamma_a[(sym1__ - 1)], 0, lp__),
            "assigning variable gamma_a");
        } else {
          current_statement__ = 11;
          assign(gamma_a, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gamma_a[(sym1__ - 1)], 0),
            "assigning variable gamma_a");
        }}
      std::vector<local_scalar_t__> nb2_phi;
      nb2_phi = std::vector<local_scalar_t__>(nb2_phi_1dim__, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(nb2_phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable nb2_phi");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        current_statement__ = 12;
        if (jacobian__) {
          current_statement__ = 12;
          assign(nb2_phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nb2_phi[(sym1__ - 1)], 0, lp__),
            "assigning variable nb2_phi");
        } else {
          current_statement__ = 12;
          assign(nb2_phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nb2_phi[(sym1__ - 1)], 0),
            "assigning variable nb2_phi");
        }}
      std::vector<local_scalar_t__> nu;
      nu = std::vector<local_scalar_t__>(estimate_nu, DUMMY_VAR__);
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        current_statement__ = 13;
        assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable nu");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        current_statement__ = 13;
        if (jacobian__) {
          current_statement__ = 13;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu[(sym1__ - 1)], 2, lp__),
            "assigning variable nu");
        } else {
          current_statement__ = 13;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu[(sym1__ - 1)], 2),
            "assigning variable nu");
        }}
      std::vector<local_scalar_t__> ymiss;
      ymiss = std::vector<local_scalar_t__>(n_na, DUMMY_VAR__);
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
        current_statement__ = 14;
        assign(ymiss, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ymiss");}
      std::vector<local_scalar_t__> phi;
      phi = std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 15;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi");}
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 15;
        if (jacobian__) {
          current_statement__ = 15;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(phi[(sym1__ - 1)], -1, 1, lp__),
            "assigning variable phi");
        } else {
          current_statement__ = 15;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(phi[(sym1__ - 1)], -1, 1),
            "assigning variable phi");
        }}
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(theta_1dim__, DUMMY_VAR__);
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        current_statement__ = 16;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta");}
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        current_statement__ = 16;
        if (jacobian__) {
          current_statement__ = 16;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(theta[(sym1__ - 1)], -1, 1, lp__),
            "assigning variable theta");
        } else {
          current_statement__ = 16;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(theta[(sym1__ - 1)], -1, 1),
            "assigning variable theta");
        }}
      std::vector<local_scalar_t__> gp_theta;
      gp_theta = std::vector<local_scalar_t__>(gp_theta_1dim__, DUMMY_VAR__);
      
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        current_statement__ = 17;
        assign(gp_theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable gp_theta");}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        current_statement__ = 17;
        if (jacobian__) {
          current_statement__ = 17;
          assign(gp_theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gp_theta[(sym1__ - 1)], 0, lp__),
            "assigning variable gp_theta");
        } else {
          current_statement__ = 17;
          assign(gp_theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gp_theta[(sym1__ - 1)], 0),
            "assigning variable gp_theta");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> Lcorr;
      Lcorr = Eigen::Matrix<local_scalar_t__, -1, -1>(n_pcor, n_pcor);
      stan::math::fill(Lcorr, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Lcorr_in__;
      Lcorr_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((n_pcor *
                                                             (n_pcor - 1)) /
                                                            2));
      stan::math::fill(Lcorr_in__, DUMMY_VAR__);
      
      current_statement__ = 18;
      Lcorr_in__ = in__.vector(((n_pcor * (n_pcor - 1)) / 2));
      current_statement__ = 18;
      if (jacobian__) {
        current_statement__ = 18;
        assign(Lcorr, nil_index_list(),
          stan::math::cholesky_corr_constrain(Lcorr_in__, n_pcor, lp__),
          "assigning variable Lcorr");
      } else {
        current_statement__ = 18;
        assign(Lcorr, nil_index_list(),
          stan::math::cholesky_corr_constrain(Lcorr_in__, n_pcor),
          "assigning variable Lcorr");
      }
      std::vector<local_scalar_t__> sigma_process;
      sigma_process = std::vector<local_scalar_t__>(sigma_process_1dim__, DUMMY_VAR__);
      
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        current_statement__ = 19;
        assign(sigma_process, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_process");}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        current_statement__ = 19;
        if (jacobian__) {
          current_statement__ = 19;
          assign(sigma_process,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_process[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_process");
        } else {
          current_statement__ = 19;
          assign(sigma_process,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_process[(sym1__ - 1)], 0),
            "assigning variable sigma_process");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> effectsKnots;
      effectsKnots = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(effectsKnots_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(effectsKnots_2dim__));
      stan::math::fill(effectsKnots, DUMMY_VAR__);
      
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= effectsKnots_1dim__; ++sym1__) {
        current_statement__ = 20;
        assign(effectsKnots, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(effectsKnots_2dim__), "assigning variable effectsKnots");
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> pred;
      pred = Eigen::Matrix<local_scalar_t__, -1, -1>(P, N);
      stan::math::fill(pred, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Z;
      Z = Eigen::Matrix<local_scalar_t__, -1, -1>(P, K);
      stan::math::fill(Z, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> yall;
      yall = Eigen::Matrix<local_scalar_t__, -1, -1>(P, N);
      stan::math::fill(yall, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_vec;
      sigma_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_vec_1dim__);
      stan::math::fill(sigma_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_a_vec;
      gamma_a_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(gamma_a_vec_1dim__);
      stan::math::fill(gamma_a_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> nb_phi_vec;
      nb_phi_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(nb_phi_vec_1dim__);
      stan::math::fill(nb_phi_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_vec;
      phi_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(phi_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_vec;
      theta_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(theta_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> x;
      x = Eigen::Matrix<local_scalar_t__, -1, -1>(K, N);
      stan::math::fill(x, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> indicator;
      indicator = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(indicator, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_root;
      psi_root = Eigen::Matrix<local_scalar_t__, -1, 1>(psi_root_1dim__);
      stan::math::fill(psi_root, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma_derived;
      Sigma_derived = Eigen::Matrix<local_scalar_t__, -1, -1>(Sigma_derived_1dim__, Sigma_derived_2dim__);
      stan::math::fill(Sigma_derived, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma_temp;
      Sigma_temp = Eigen::Matrix<local_scalar_t__, -1, -1>(Sigma_temp_1dim__, Sigma_temp_2dim__);
      stan::math::fill(Sigma_temp, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> sigma12_vec;
      sigma12_vec = Eigen::Matrix<local_scalar_t__, -1, -1>(sigma12_vec_1dim__, 1);
      stan::math::fill(sigma12_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> temp_sums;
      temp_sums = Eigen::Matrix<local_scalar_t__, -1, -1>(temp_sums_1dim__, temp_sums_2dim__);
      stan::math::fill(temp_sums, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> temp_counts;
      temp_counts = Eigen::Matrix<local_scalar_t__, -1, -1>(temp_counts_1dim__, temp_counts_2dim__);
      stan::math::fill(temp_counts, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> cond_sigma_vec;
      cond_sigma_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(cond_sigma_vec_1dim__);
      stan::math::fill(cond_sigma_vec, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> cond_mean_vec;
      cond_mean_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(cond_mean_vec_1dim__);
      stan::math::fill(cond_mean_vec, DUMMY_VAR__);
      
      local_scalar_t__ sigma11;
      sigma11 = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_pro;
      sigma_pro = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(sigma_pro, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> spline_a_trans;
      spline_a_trans = Eigen::Matrix<local_scalar_t__, -1, -1>(spline_a_trans_1dim__, spline_a_trans_2dim__);
      stan::math::fill(spline_a_trans, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> SigmaKnots;
      SigmaKnots = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(n_knots, n_knots));
      stan::math::fill(SigmaKnots, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> obs_cov_offset;
      obs_cov_offset = Eigen::Matrix<local_scalar_t__, -1, 1>(n_pos);
      stan::math::fill(obs_cov_offset, DUMMY_VAR__);
      
      current_statement__ = 53;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 44;
        assign(sigma_pro, cons_list(index_uni(k), nil_index_list()), 1,
          "assigning variable sigma_pro");
        current_statement__ = 51;
        if (logical_eq(est_sigma_process, 1)) {
          current_statement__ = 49;
          if (logical_eq(n_sigma_process, 1)) {
            current_statement__ = 47;
            assign(sigma_pro, cons_list(index_uni(k), nil_index_list()),
              sigma_process[(1 - 1)], "assigning variable sigma_pro");
          } else {
            current_statement__ = 45;
            assign(sigma_pro, cons_list(index_uni(k), nil_index_list()),
              sigma_process[(k - 1)], "assigning variable sigma_pro");
          }
        } }
      current_statement__ = 62;
      if (logical_eq(est_phi, 1)) {
        current_statement__ = 60;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 58;
          assign(phi_vec, cons_list(index_uni(k), nil_index_list()),
            phi[(k - 1)], "assigning variable phi_vec");}
      } else {
        current_statement__ = 56;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 54;
          assign(phi_vec, cons_list(index_uni(k), nil_index_list()), 1,
            "assigning variable phi_vec");}
      }
      current_statement__ = 71;
      if (logical_eq(est_theta, 1)) {
        current_statement__ = 69;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 67;
          assign(theta_vec, cons_list(index_uni(k), nil_index_list()),
            theta[(k - 1)], "assigning variable theta_vec");}
      } else {
        current_statement__ = 65;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 63;
          assign(theta_vec, cons_list(index_uni(k), nil_index_list()), 0,
            "assigning variable theta_vec");}
      }
      current_statement__ = 76;
      if (logical_eq(est_sigma_params, 1)) {
        current_statement__ = 74;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 72;
          assign(sigma_vec, cons_list(index_uni(p), nil_index_list()),
            sigma[(varIndx[(p - 1)] - 1)], "assigning variable sigma_vec");}
      } 
      current_statement__ = 81;
      if (logical_eq(est_gamma_params, 1)) {
        current_statement__ = 79;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 77;
          assign(gamma_a_vec, cons_list(index_uni(p), nil_index_list()),
            gamma_a[(varIndx[(p - 1)] - 1)], "assigning variable gamma_a_vec");
        }
      } 
      current_statement__ = 86;
      if (logical_eq(est_nb2_params, 1)) {
        current_statement__ = 84;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 82;
          assign(nb_phi_vec, cons_list(index_uni(p), nil_index_list()),
            nb2_phi[(varIndx[(p - 1)] - 1)], "assigning variable nb_phi_vec");
        }
      } 
      current_statement__ = 96;
      if (logical_eq(long_format, 0)) {
        current_statement__ = 89;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 87;
          assign(yall,
            cons_list(index_uni(row_indx_pos[(i - 1)]),
              cons_list(index_uni(col_indx_pos[(i - 1)]), nil_index_list())),
            y[(i - 1)], "assigning variable yall");}
        current_statement__ = 94;
        if (logical_gt(n_na, 0)) {
          current_statement__ = 92;
          for (int i = 1; i <= n_na; ++i) {
            current_statement__ = 90;
            assign(yall,
              cons_list(index_uni(row_indx_na[(i - 1)]),
                cons_list(index_uni(col_indx_na[(i - 1)]), nil_index_list())),
              ymiss[(i - 1)], "assigning variable yall");}
        } 
      } 
      current_statement__ = 156;
      if (logical_eq(proportional_model, 0)) {
        current_statement__ = 99;
        for (int i = 1; i <= nZ; ++i) {
          current_statement__ = 97;
          assign(Z,
            cons_list(index_uni(row_indx[(i - 1)]),
              cons_list(index_uni(col_indx[(i - 1)]), nil_index_list())),
            z[(i - 1)], "assigning variable Z");}
        current_statement__ = 104;
        if (logical_gt(nZero, 2)) {
          current_statement__ = 102;
          for (int i = 1; i <= (nZero - 2); ++i) {
            current_statement__ = 100;
            assign(Z,
              cons_list(index_uni(row_indx_z[(i - 1)]),
                cons_list(index_uni(col_indx_z[(i - 1)]), nil_index_list())),
              0, "assigning variable Z");}
        } 
        current_statement__ = 107;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 105;
          assign(Z,
            cons_list(index_uni(k),
              cons_list(index_uni(k), nil_index_list())), zpos[(k - 1)],
            "assigning variable Z");}
        current_statement__ = 120;
        if (logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 118;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 112;
            if (logical_lt(zpos[(k - 1)], 0)) {
              current_statement__ = 110;
              assign(indicator, cons_list(index_uni(k), nil_index_list()),
                -1, "assigning variable indicator");
            } else {
              current_statement__ = 108;
              assign(indicator, cons_list(index_uni(k), nil_index_list()), 1,
                "assigning variable indicator");
            }
            current_statement__ = 113;
            assign(psi_root, cons_list(index_uni(k), nil_index_list()),
              stan::math::sqrt(psi[(k - 1)]), "assigning variable psi_root");
            current_statement__ = 116;
            for (int p = 1; p <= P; ++p) {
              current_statement__ = 114;
              assign(Z,
                cons_list(index_uni(p),
                  cons_list(index_uni(k), nil_index_list())),
                ((rvalue(Z,
                    cons_list(index_uni(p),
                      cons_list(index_uni(k), nil_index_list())), "Z") *
                   indicator[(k - 1)]) * (1 / psi_root[(k - 1)])),
                "assigning variable Z");}}
        } 
        current_statement__ = 128;
        if (logical_eq(est_rw, 1)) {
          current_statement__ = 126;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 121;
            assign(x,
              cons_list(index_uni(k),
                cons_list(index_uni(1), nil_index_list())), x0[(k - 1)],
              "assigning variable x");
            current_statement__ = 124;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 122;
              assign(x,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                ((phi_vec[(k - 1)] *
                   rvalue(x,
                     cons_list(index_uni(k),
                       cons_list(index_uni((t - 1)), nil_index_list())), "x"))
                  +
                  rvalue(devs,
                    cons_list(index_uni(k),
                      cons_list(index_uni((t - 1)), nil_index_list())),
                    "devs")), "assigning variable x");}}
        } 
        current_statement__ = 136;
        if (logical_eq(est_spline, 1)) {
          current_statement__ = 130;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 129;
            assign(spline_a_trans, cons_list(index_uni(k), nil_index_list()),
              multiply(
                rvalue(spline_a, cons_list(index_uni(k), nil_index_list()),
                  "spline_a"), sigma_pro[(k - 1)]),
              "assigning variable spline_a_trans");}
          current_statement__ = 131;
          assign(x, nil_index_list(),
            multiply(spline_a_trans, transpose(X_spline)),
            "assigning variable x");
          current_statement__ = 134;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 132;
            assign(x, cons_list(index_uni(k), nil_index_list()),
              add(x0[(k - 1)],
                stan::model::deep_copy(
                  rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"))),
              "assigning variable x");}
        } 
        current_statement__ = 149;
        if (logical_eq(est_gp, 1)) {
          current_statement__ = 147;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 137;
            assign(SigmaKnots, cons_list(index_uni(k), nil_index_list()),
              cov_exp_quad(knot_locs, sigma_pro[(k - 1)], gp_theta[(k - 1)]),
              "assigning variable SigmaKnots");
            current_statement__ = 140;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 138;
              assign(SigmaKnots,
                cons_list(index_uni(k),
                  cons_list(index_uni(i),
                    cons_list(index_uni(i), nil_index_list()))),
                (rvalue(SigmaKnots,
                   cons_list(index_uni(k),
                     cons_list(index_uni(i),
                       cons_list(index_uni(i), nil_index_list()))),
                   "SigmaKnots") + gp_delta), "assigning variable SigmaKnots");
            }
            current_statement__ = 145;
            if (logical_eq(n_knots, N)) {
              current_statement__ = 143;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(cholesky_decompose(SigmaKnots[(k - 1)]),
                    effectsKnots[(k - 1)])), "assigning variable x");
            } else {
              current_statement__ = 141;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(
                    multiply(
                      multiply(
                        cov_exp_quad(data_locs, knot_locs,
                          sigma_pro[(k - 1)], gp_theta[(k - 1)]),
                        inverse_spd(SigmaKnots[(k - 1)])),
                      cholesky_decompose(SigmaKnots[(k - 1)])),
                    effectsKnots[(k - 1)])), "assigning variable x");
            }}
        } 
        current_statement__ = 154;
        if (logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 152;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 150;
            assign(x, cons_list(index_uni(k), nil_index_list()),
              multiply(
                multiply(
                  stan::model::deep_copy(
                    rvalue(x, cons_list(index_uni(k), nil_index_list()), "x")),
                  indicator[(k - 1)]), psi_root[(k - 1)]),
              "assigning variable x");}
        } 
      } 
      current_statement__ = 190;
      if (logical_eq(proportional_model, 1)) {
        current_statement__ = 164;
        if (logical_eq(est_rw, 1)) {
          current_statement__ = 162;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 157;
            assign(x,
              cons_list(index_uni(k),
                cons_list(index_uni(1), nil_index_list())), x0[(k - 1)],
              "assigning variable x");
            current_statement__ = 160;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 158;
              assign(x,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                ((phi_vec[(k - 1)] *
                   rvalue(x,
                     cons_list(index_uni(k),
                       cons_list(index_uni((t - 1)), nil_index_list())), "x"))
                  +
                  rvalue(devs,
                    cons_list(index_uni(k),
                      cons_list(index_uni((t - 1)), nil_index_list())),
                    "devs")), "assigning variable x");}}
        } 
        current_statement__ = 172;
        if (logical_eq(est_spline, 1)) {
          current_statement__ = 166;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 165;
            assign(spline_a_trans, cons_list(index_uni(k), nil_index_list()),
              multiply(
                rvalue(spline_a, cons_list(index_uni(k), nil_index_list()),
                  "spline_a"), sigma_pro[(k - 1)]),
              "assigning variable spline_a_trans");}
          current_statement__ = 167;
          assign(x, nil_index_list(),
            multiply(spline_a_trans, transpose(X_spline)),
            "assigning variable x");
          current_statement__ = 170;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 168;
            assign(x, cons_list(index_uni(k), nil_index_list()),
              add(x0[(k - 1)],
                stan::model::deep_copy(
                  rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"))),
              "assigning variable x");}
        } 
        current_statement__ = 185;
        if (logical_eq(est_gp, 1)) {
          current_statement__ = 183;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 173;
            assign(SigmaKnots, cons_list(index_uni(k), nil_index_list()),
              cov_exp_quad(knot_locs, sigma_pro[(k - 1)], gp_theta[(k - 1)]),
              "assigning variable SigmaKnots");
            current_statement__ = 176;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 174;
              assign(SigmaKnots,
                cons_list(index_uni(k),
                  cons_list(index_uni(i),
                    cons_list(index_uni(i), nil_index_list()))),
                (rvalue(SigmaKnots,
                   cons_list(index_uni(k),
                     cons_list(index_uni(i),
                       cons_list(index_uni(i), nil_index_list()))),
                   "SigmaKnots") + gp_delta), "assigning variable SigmaKnots");
            }
            current_statement__ = 181;
            if (logical_eq(n_knots, N)) {
              current_statement__ = 179;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(cholesky_decompose(SigmaKnots[(k - 1)]),
                    effectsKnots[(k - 1)])), "assigning variable x");
            } else {
              current_statement__ = 177;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(
                    multiply(
                      multiply(
                        cov_exp_quad(data_locs, knot_locs,
                          sigma_pro[(k - 1)], gp_theta[(k - 1)]),
                        inverse_spd(SigmaKnots[(k - 1)])),
                      cholesky_decompose(SigmaKnots[(k - 1)])),
                    effectsKnots[(k - 1)])), "assigning variable x");
            }}
        } 
        current_statement__ = 188;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 186;
          assign(Z, cons_list(index_uni(p), nil_index_list()),
            to_row_vector(p_z[(p - 1)]), "assigning variable Z");}
      } 
      current_statement__ = 195;
      if (logical_gt(num_pro_covar, 0)) {
        current_statement__ = 193;
        for (int i = 1; i <= num_pro_covar; ++i) {
          current_statement__ = 191;
          assign(x,
            cons_list(index_uni(pro_covar_index[(i - 1)][(2 - 1)]),
              cons_list(index_uni(pro_covar_index[(i - 1)][(1 - 1)]),
                nil_index_list())),
            (rvalue(x,
               cons_list(index_uni(pro_covar_index[(i - 1)][(2 - 1)]),
                 cons_list(index_uni(pro_covar_index[(i - 1)][(1 - 1)]),
                   nil_index_list())), "x") +
              (rvalue(b_pro,
                 cons_list(index_uni(pro_covar_index[(i - 1)][(3 - 1)]),
                   cons_list(index_uni(pro_covar_index[(i - 1)][(2 - 1)]),
                     nil_index_list())), "b_pro") * pro_covar_value[(i - 1)])),
            "assigning variable x");}
      } 
      current_statement__ = 196;
      assign(pred, nil_index_list(), multiply(Z, x),
        "assigning variable pred");
      current_statement__ = 199;
      for (int i = 1; i <= n_pos; ++i) {
        current_statement__ = 197;
        assign(obs_cov_offset, cons_list(index_uni(i), nil_index_list()), 0,
          "assigning variable obs_cov_offset");}
      current_statement__ = 210;
      if (logical_gt(num_obs_covar, 0)) {
        current_statement__ = 208;
        if (logical_eq(long_format, 0)) {
          current_statement__ = 206;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 204;
            assign(pred,
              cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                cons_list(index_uni(obs_covar_index[(i - 1)][(1 - 1)]),
                  nil_index_list())),
              (rvalue(pred,
                 cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                   cons_list(index_uni(obs_covar_index[(i - 1)][(1 - 1)]),
                     nil_index_list())), "pred") +
                (rvalue(b_obs,
                   cons_list(index_uni(obs_covar_index[(i - 1)][(3 - 1)]),
                     cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                       nil_index_list())), "b_obs") *
                  obs_covar_value[(i - 1)])), "assigning variable pred");}
        } else {
          current_statement__ = 202;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 200;
            assign(obs_cov_offset,
              cons_list(index_uni(match_obs_covar[(i - 1)]),
                nil_index_list()),
              (obs_cov_offset[(match_obs_covar[(i - 1)] - 1)] +
                (rvalue(b_obs,
                   cons_list(index_uni(obs_covar_index[(i - 1)][(3 - 1)]),
                     cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                       nil_index_list())), "b_obs") *
                  obs_covar_value[(i - 1)])),
              "assigning variable obs_cov_offset");}
        }
      } 
      current_statement__ = 235;
      if ((primitive_value(logical_eq(long_format, 1)) && primitive_value(
          logical_eq(est_cor, 1)))) {
        current_statement__ = 216;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 214;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 211;
            assign(temp_sums,
              cons_list(index_uni(p),
                cons_list(index_uni(n), nil_index_list())), 0.0,
              "assigning variable temp_sums");
            current_statement__ = 212;
            assign(temp_counts,
              cons_list(index_uni(p),
                cons_list(index_uni(n), nil_index_list())), 0.0,
              "assigning variable temp_counts");}}
        current_statement__ = 220;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 217;
          assign(temp_sums,
            cons_list(index_uni(row_indx_pos[(i - 1)]),
              cons_list(index_uni(col_indx_pos[(i - 1)]), nil_index_list())),
            (rvalue(temp_sums,
               cons_list(index_uni(row_indx_pos[(i - 1)]),
                 cons_list(index_uni(col_indx_pos[(i - 1)]),
                   nil_index_list())), "temp_sums") +
              (y[(i - 1)] -
                rvalue(pred,
                  cons_list(index_uni(row_indx_pos[(i - 1)]),
                    cons_list(index_uni(col_indx_pos[(i - 1)]),
                      nil_index_list())), "pred"))),
            "assigning variable temp_sums");
          current_statement__ = 218;
          assign(temp_counts,
            cons_list(index_uni(row_indx_pos[(i - 1)]),
              cons_list(index_uni(col_indx_pos[(i - 1)]), nil_index_list())),
            (rvalue(temp_counts,
               cons_list(index_uni(row_indx_pos[(i - 1)]),
                 cons_list(index_uni(col_indx_pos[(i - 1)]),
                   nil_index_list())), "temp_counts") + 1),
            "assigning variable temp_counts");}
        current_statement__ = 225;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 223;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 221;
            assign(temp_sums,
              cons_list(index_uni(p),
                cons_list(index_uni(n), nil_index_list())),
              (rvalue(temp_sums,
                 cons_list(index_uni(p),
                   cons_list(index_uni(n), nil_index_list())), "temp_sums") /
                rvalue(temp_counts,
                  cons_list(index_uni(p),
                    cons_list(index_uni(n), nil_index_list())),
                  "temp_counts")), "assigning variable temp_sums");}}
        current_statement__ = 226;
        assign(Sigma_derived, nil_index_list(),
          quad_form_diag(multiply_lower_tri_self_transpose(Lcorr), sigma_vec),
          "assigning variable Sigma_derived");
        current_statement__ = 233;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 227;
          sigma11 = rvalue(Sigma_derived,
                      cons_list(index_uni(p),
                        cons_list(index_uni(p), nil_index_list())),
                      "Sigma_derived");
          current_statement__ = 228;
          assign(Sigma_temp, nil_index_list(),
            inverse(subset(Sigma_derived, p, P, pstream__)),
            "assigning variable Sigma_temp");
          current_statement__ = 229;
          assign(sigma12_vec, nil_index_list(),
            subsetvec(Sigma_derived, p, P, pstream__),
            "assigning variable sigma12_vec");
          current_statement__ = 230;
          assign(cond_mean_vec, cons_list(index_uni(p), nil_index_list()),
            multiply(multiply(to_row_vector(sigma12_vec), Sigma_temp),
              to_vector(subsetvec2(col(temp_sums, p), p, P, pstream__))),
            "assigning variable cond_mean_vec");
          current_statement__ = 231;
          assign(cond_sigma_vec, cons_list(index_uni(p), nil_index_list()),
            stan::math::sqrt(
              (sigma11 -
                multiply(multiply(to_row_vector(sigma12_vec), Sigma_temp),
                  to_vector(sigma12_vec)))),
            "assigning variable cond_sigma_vec");}
      } 
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "sigma_vec[sym1__]",
                               sigma_vec[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_greater_or_equal(function__, "gamma_a_vec[sym1__]",
                               gamma_a_vec[(sym1__ - 1)], 0);}
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "nb_phi_vec[sym1__]",
                               nb_phi_vec[(sym1__ - 1)], 0);}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
        current_statement__ = 31;
        current_statement__ = 31;
        check_greater_or_equal(function__, "psi_root[sym1__]",
                               psi_root[(sym1__ - 1)], 0);}
      {
        current_statement__ = 327;
        lp_accum__.add(normal_lpdf<propto__>(x0, 0, 1));
        current_statement__ = 330;
        if (logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 328;
          lp_accum__.add(gamma_lpdf<propto__>(psi, 2, 1));
        } 
        current_statement__ = 333;
        if (logical_eq(estimate_nu, 1)) {
          current_statement__ = 331;
          lp_accum__.add(gamma_lpdf<propto__>(nu[(1 - 1)], 2, 0.1));
        } 
        current_statement__ = 336;
        if (logical_eq(est_phi, 1)) {
          current_statement__ = 334;
          lp_accum__.add(normal_lpdf<propto__>(phi, 0, 1));
        } 
        current_statement__ = 339;
        if (logical_eq(est_theta, 1)) {
          current_statement__ = 337;
          lp_accum__.add(normal_lpdf<propto__>(theta, 0, 1));
        } 
        current_statement__ = 342;
        if (est_sigma_process) {
          current_statement__ = 340;
          lp_accum__.add(normal_lpdf<propto__>(sigma_process, 0, 1));
        } 
        current_statement__ = 344;
        if (logical_eq(est_sigma_params, 1)) {
          current_statement__ = 343;
          lp_accum__.add(student_t_lpdf<propto__>(sigma, 3, 0, 1));
        } 
        current_statement__ = 346;
        if (logical_eq(est_gamma_params, 1)) {
          current_statement__ = 345;
          lp_accum__.add(student_t_lpdf<propto__>(gamma_a, 3, 0, 1));
        } 
        current_statement__ = 348;
        if (logical_eq(est_nb2_params, 1)) {
          current_statement__ = 347;
          lp_accum__.add(student_t_lpdf<propto__>(nb2_phi, 3, 0, 1));
        } 
        current_statement__ = 351;
        if (logical_eq(est_cor, 1)) {
          current_statement__ = 349;
          lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(Lcorr, 1));
        } 
        current_statement__ = 357;
        if (logical_eq(est_gp, 1)) {
          current_statement__ = 352;
          lp_accum__.add(
            inv_gamma_lpdf<propto__>(gp_theta, gp_theta_prior[(1 - 1)],
              gp_theta_prior[(2 - 1)]));
          current_statement__ = 355;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 353;
            lp_accum__.add(std_normal_lpdf<propto__>(effectsKnots[(k - 1)]));
          }
        } 
        current_statement__ = 382;
        if (logical_eq(est_rw, 1)) {
          current_statement__ = 380;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 378;
            if (logical_eq(use_normal, 0)) {
              current_statement__ = 369;
              for (int t = 1; t <= 1; ++t) {
                current_statement__ = 367;
                if (logical_eq(estimate_nu, 1)) {
                  current_statement__ = 365;
                  lp_accum__.add(
                    student_t_lpdf<propto__>(
                      rvalue(devs,
                        cons_list(index_uni(k),
                          cons_list(index_uni(t), nil_index_list())), "devs"),
                      nu[(1 - 1)], 0, sigma_pro[(k - 1)]));
                } else {
                  current_statement__ = 363;
                  lp_accum__.add(
                    student_t_lpdf<propto__>(
                      rvalue(devs,
                        cons_list(index_uni(k),
                          cons_list(index_uni(t), nil_index_list())), "devs"),
                      nu_fixed, 0, sigma_pro[(k - 1)]));
                }}
              current_statement__ = 376;
              for (int t = 2; t <= (N - 1); ++t) {
                current_statement__ = 374;
                if (logical_eq(estimate_nu, 1)) {
                  current_statement__ = 372;
                  lp_accum__.add(
                    student_t_lpdf<propto__>(
                      rvalue(devs,
                        cons_list(index_uni(k),
                          cons_list(index_uni(t), nil_index_list())), "devs"),
                      nu[(1 - 1)],
                      (theta_vec[(k - 1)] *
                        rvalue(devs,
                          cons_list(index_uni(k),
                            cons_list(index_uni((t - 1)), nil_index_list())),
                          "devs")), sigma_pro[(k - 1)]));
                } else {
                  current_statement__ = 370;
                  lp_accum__.add(
                    student_t_lpdf<propto__>(
                      rvalue(devs,
                        cons_list(index_uni(k),
                          cons_list(index_uni(t), nil_index_list())), "devs"),
                      nu_fixed,
                      (theta_vec[(k - 1)] *
                        rvalue(devs,
                          cons_list(index_uni(k),
                            cons_list(index_uni((t - 1)), nil_index_list())),
                          "devs")), sigma_pro[(k - 1)]));
                }}
            } else {
              current_statement__ = 358;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(devs,
                    cons_list(index_uni(k),
                      cons_list(index_uni(1), nil_index_list())), "devs"), 0,
                  1));
              current_statement__ = 361;
              for (int t = 2; t <= (N - 1); ++t) {
                current_statement__ = 359;
                lp_accum__.add(
                  normal_lpdf<propto__>(
                    rvalue(devs,
                      cons_list(index_uni(k),
                        cons_list(index_uni(t), nil_index_list())), "devs"),
                    (theta_vec[(k - 1)] *
                      rvalue(devs,
                        cons_list(index_uni(k),
                          cons_list(index_uni((t - 1)), nil_index_list())),
                        "devs")), sigma_pro[(k - 1)]));}
            }}
        } 
        current_statement__ = 387;
        if (logical_eq(est_spline, 1)) {
          current_statement__ = 385;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 383;
            lp_accum__.add(
              std_normal_lpdf<propto__>(
                rvalue(spline_a, cons_list(index_uni(k), nil_index_list()),
                  "spline_a")));}
        } 
        current_statement__ = 395;
        if (logical_eq(proportional_model, 0)) {
          current_statement__ = 392;
          lp_accum__.add(std_normal_lpdf<propto__>(z));
          current_statement__ = 393;
          lp_accum__.add(std_normal_lpdf<propto__>(zpos));
        } else {
          current_statement__ = 390;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 388;
            lp_accum__.add(dirichlet_lpdf<propto__>(p_z[(p - 1)], alpha_vec));
          }
        }
        current_statement__ = 440;
        if (logical_eq(est_cor, 0)) {
          current_statement__ = 438;
          if (logical_eq(long_format, 0)) {
            current_statement__ = 436;
            if (logical_eq(obs_model, 1)) {
              current_statement__ = 434;
              for (int i = 1; i <= P; ++i) {
                current_statement__ = 433;
                lp_accum__.add(
                  normal_lpdf<false>(
                    rvalue(yall, cons_list(index_uni(i), nil_index_list()),
                      "yall"),
                    rvalue(pred, cons_list(index_uni(i), nil_index_list()),
                      "pred"), sigma_vec[(i - 1)]));}
            } 
          } else {
            current_statement__ = 411;
            if (logical_eq(obs_model, 1)) {
              current_statement__ = 409;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 408;
                lp_accum__.add(
                  normal_lpdf<false>(y[(i - 1)],
                    ((offset[(i - 1)] +
                       rvalue(pred,
                         cons_list(index_uni(row_indx_pos[(i - 1)]),
                           cons_list(index_uni(col_indx_pos[(i - 1)]),
                             nil_index_list())), "pred")) +
                      obs_cov_offset[(i - 1)]),
                    stan::math::exp(
                      (stan::math::log(
                         sigma_vec[(row_indx_pos[(i - 1)] - 1)]) -
                        log_weights_vec[(i - 1)]))));}
            } 
            current_statement__ = 415;
            if (logical_eq(obs_model, 2)) {
              current_statement__ = 413;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 412;
                lp_accum__.add(
                  gamma_lpdf<false>(y[(i - 1)],
                    gamma_a_vec[(row_indx_pos[(i - 1)] - 1)],
                    (gamma_a_vec[(row_indx_pos[(i - 1)] - 1)] /
                      stan::math::exp(
                        ((offset[(i - 1)] +
                           rvalue(pred,
                             cons_list(index_uni(row_indx_pos[(i - 1)]),
                               cons_list(index_uni(col_indx_pos[(i - 1)]),
                                 nil_index_list())), "pred")) +
                          obs_cov_offset[(i - 1)])))));}
            } 
            current_statement__ = 419;
            if (logical_eq(obs_model, 3)) {
              current_statement__ = 417;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 416;
                lp_accum__.add(
                  poisson_log_lpmf<false>(y_int[(i - 1)],
                    ((offset[(i - 1)] +
                       rvalue(pred,
                         cons_list(index_uni(row_indx_pos[(i - 1)]),
                           cons_list(index_uni(col_indx_pos[(i - 1)]),
                             nil_index_list())), "pred")) +
                      obs_cov_offset[(i - 1)])));}
            } 
            current_statement__ = 423;
            if (logical_eq(obs_model, 4)) {
              current_statement__ = 421;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 420;
                lp_accum__.add(
                  neg_binomial_2_log_lpmf<false>(y_int[(i - 1)],
                    ((offset[(i - 1)] +
                       rvalue(pred,
                         cons_list(index_uni(row_indx_pos[(i - 1)]),
                           cons_list(index_uni(col_indx_pos[(i - 1)]),
                             nil_index_list())), "pred")) +
                      obs_cov_offset[(i - 1)]),
                    nb_phi_vec[(row_indx_pos[(i - 1)] - 1)]));}
            } 
            current_statement__ = 427;
            if (logical_eq(obs_model, 5)) {
              current_statement__ = 425;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 424;
                lp_accum__.add(
                  bernoulli_logit_lpmf<false>(y_int[(i - 1)],
                    ((offset[(i - 1)] +
                       rvalue(pred,
                         cons_list(index_uni(row_indx_pos[(i - 1)]),
                           cons_list(index_uni(col_indx_pos[(i - 1)]),
                             nil_index_list())), "pred")) +
                      obs_cov_offset[(i - 1)])));}
            } 
            current_statement__ = 431;
            if (logical_eq(obs_model, 6)) {
              current_statement__ = 429;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 428;
                lp_accum__.add(
                  lognormal_lpdf<false>(y[(i - 1)],
                    ((offset[(i - 1)] +
                       rvalue(pred,
                         cons_list(index_uni(row_indx_pos[(i - 1)]),
                           cons_list(index_uni(col_indx_pos[(i - 1)]),
                             nil_index_list())), "pred")) +
                      obs_cov_offset[(i - 1)]),
                    sigma_vec[(row_indx_pos[(i - 1)] - 1)]));}
            } 
          }
        } else {
          current_statement__ = 406;
          if (logical_eq(long_format, 0)) {
            current_statement__ = 404;
            if (logical_eq(obs_model, 1)) {
              current_statement__ = 402;
              for (int i = 1; i <= N; ++i) {
                current_statement__ = 401;
                lp_accum__.add(
                  multi_normal_cholesky_lpdf<false>(col(yall, i),
                    col(pred, i), diag_pre_multiply(sigma_vec, Lcorr)));}
            } 
          } else {
            current_statement__ = 399;
            if (logical_eq(obs_model, 1)) {
              current_statement__ = 397;
              for (int i = 1; i <= n_pos; ++i) {
                current_statement__ = 396;
                lp_accum__.add(
                  normal_lpdf<false>(y[(i - 1)],
                    (((offset[(i - 1)] +
                        rvalue(pred,
                          cons_list(index_uni(row_indx_pos[(i - 1)]),
                            cons_list(index_uni(col_indx_pos[(i - 1)]),
                              nil_index_list())), "pred")) +
                       obs_cov_offset[(i - 1)]) +
                      cond_mean_vec[(row_indx_pos[(i - 1)] - 1)]),
                    stan::math::exp(
                      (stan::math::log(
                         cond_sigma_vec[(row_indx_pos[(i - 1)] - 1)]) -
                        log_weights_vec[(i - 1)]))));}
            } 
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_dfa_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> devs;
      devs = Eigen::Matrix<double, -1, -1>(devs_1dim__, devs_2dim__);
      stan::math::fill(devs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      devs = in__.matrix(devs_1dim__, devs_2dim__);
      Eigen::Matrix<double, -1, 1> x0;
      x0 = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(x0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      x0 = in__.vector(K);
      Eigen::Matrix<double, -1, 1> psi;
      psi = Eigen::Matrix<double, -1, 1>(psi_1dim__);
      stan::math::fill(psi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      psi = in__.vector(psi_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(psi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(psi[(sym1__ - 1)], 0),
          "assigning variable psi");}
      Eigen::Matrix<double, -1, 1> z;
      z = Eigen::Matrix<double, -1, 1>(z_1dim__);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      z = in__.vector(z_1dim__);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(z, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(z[(sym1__ - 1)], z_bound[(1 - 1)],
            z_bound[(2 - 1)]), "assigning variable z");}
      Eigen::Matrix<double, -1, 1> zpos;
      zpos = Eigen::Matrix<double, -1, 1>(zpos_1dim__);
      stan::math::fill(zpos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      zpos = in__.vector(zpos_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(zpos, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(zpos[(sym1__ - 1)], lower_bound_z),
          "assigning variable zpos");}
      std::vector<Eigen::Matrix<double, -1, 1>> p_z;
      p_z = std::vector<Eigen::Matrix<double, -1, 1>>(p_z_1dim__, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(p_z, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_z_in__;
      p_z_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(p_z_1dim__, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (K - 1)));
      stan::math::fill(p_z_in__, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= p_z_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(p_z_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((K - 1)), "assigning variable p_z_in__");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= p_z_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(p_z, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_constrain(p_z_in__[(sym1__ - 1)]),
          "assigning variable p_z");}
      Eigen::Matrix<double, -1, -1> spline_a;
      spline_a = Eigen::Matrix<double, -1, -1>(spline_a_1dim__, spline_a_2dim__);
      stan::math::fill(spline_a, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      spline_a = in__.matrix(spline_a_1dim__, spline_a_2dim__);
      Eigen::Matrix<double, -1, -1> b_obs;
      b_obs = Eigen::Matrix<double, -1, -1>(n_obs_covar, P);
      stan::math::fill(b_obs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      b_obs = in__.matrix(n_obs_covar, P);
      Eigen::Matrix<double, -1, -1> b_pro;
      b_pro = Eigen::Matrix<double, -1, -1>(n_pro_covar, K);
      stan::math::fill(b_pro, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      b_pro = in__.matrix(n_pro_covar, K);
      std::vector<double> sigma;
      sigma = std::vector<double>(sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      std::vector<double> gamma_a;
      gamma_a = std::vector<double>(gamma_a_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(gamma_a, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable gamma_a");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(gamma_a, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gamma_a[(sym1__ - 1)], 0),
          "assigning variable gamma_a");}
      std::vector<double> nb2_phi;
      nb2_phi = std::vector<double>(nb2_phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(nb2_phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable nb2_phi");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(nb2_phi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(nb2_phi[(sym1__ - 1)], 0),
          "assigning variable nb2_phi");}
      std::vector<double> nu;
      nu = std::vector<double>(estimate_nu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        current_statement__ = 13;
        assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable nu");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        current_statement__ = 13;
        assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(nu[(sym1__ - 1)], 2),
          "assigning variable nu");}
      std::vector<double> ymiss;
      ymiss = std::vector<double>(n_na, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
        current_statement__ = 14;
        assign(ymiss, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ymiss");}
      std::vector<double> phi;
      phi = std::vector<double>(phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 15;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi");}
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 15;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(phi[(sym1__ - 1)], -1, 1),
          "assigning variable phi");}
      std::vector<double> theta;
      theta = std::vector<double>(theta_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        current_statement__ = 16;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta");}
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        current_statement__ = 16;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(theta[(sym1__ - 1)], -1, 1),
          "assigning variable theta");}
      std::vector<double> gp_theta;
      gp_theta = std::vector<double>(gp_theta_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        current_statement__ = 17;
        assign(gp_theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable gp_theta");}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        current_statement__ = 17;
        assign(gp_theta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gp_theta[(sym1__ - 1)], 0),
          "assigning variable gp_theta");}
      Eigen::Matrix<double, -1, -1> Lcorr;
      Lcorr = Eigen::Matrix<double, -1, -1>(n_pcor, n_pcor);
      stan::math::fill(Lcorr, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Lcorr_in__;
      Lcorr_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((n_pcor *
                                                             (n_pcor - 1)) /
                                                            2));
      stan::math::fill(Lcorr_in__, DUMMY_VAR__);
      
      current_statement__ = 18;
      Lcorr_in__ = in__.vector(((n_pcor * (n_pcor - 1)) / 2));
      current_statement__ = 18;
      assign(Lcorr, nil_index_list(),
        stan::math::cholesky_corr_constrain(Lcorr_in__, n_pcor),
        "assigning variable Lcorr");
      std::vector<double> sigma_process;
      sigma_process = std::vector<double>(sigma_process_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        current_statement__ = 19;
        assign(sigma_process, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_process");}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        current_statement__ = 19;
        assign(sigma_process, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_process[(sym1__ - 1)], 0),
          "assigning variable sigma_process");}
      std::vector<Eigen::Matrix<double, -1, 1>> effectsKnots;
      effectsKnots = std::vector<Eigen::Matrix<double, -1, 1>>(effectsKnots_1dim__, Eigen::Matrix<double, -1, 1>(effectsKnots_2dim__));
      stan::math::fill(effectsKnots, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= effectsKnots_1dim__; ++sym1__) {
        current_statement__ = 20;
        assign(effectsKnots, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(effectsKnots_2dim__), "assigning variable effectsKnots");
      }
      Eigen::Matrix<double, -1, -1> pred;
      pred = Eigen::Matrix<double, -1, -1>(P, N);
      stan::math::fill(pred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Z;
      Z = Eigen::Matrix<double, -1, -1>(P, K);
      stan::math::fill(Z, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> yall;
      yall = Eigen::Matrix<double, -1, -1>(P, N);
      stan::math::fill(yall, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sigma_vec;
      sigma_vec = Eigen::Matrix<double, -1, 1>(sigma_vec_1dim__);
      stan::math::fill(sigma_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> gamma_a_vec;
      gamma_a_vec = Eigen::Matrix<double, -1, 1>(gamma_a_vec_1dim__);
      stan::math::fill(gamma_a_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> nb_phi_vec;
      nb_phi_vec = Eigen::Matrix<double, -1, 1>(nb_phi_vec_1dim__);
      stan::math::fill(nb_phi_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> phi_vec;
      phi_vec = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(phi_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta_vec;
      theta_vec = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(theta_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> x;
      x = Eigen::Matrix<double, -1, -1>(K, N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> indicator;
      indicator = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(indicator, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> psi_root;
      psi_root = Eigen::Matrix<double, -1, 1>(psi_root_1dim__);
      stan::math::fill(psi_root, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma_derived;
      Sigma_derived = Eigen::Matrix<double, -1, -1>(Sigma_derived_1dim__, Sigma_derived_2dim__);
      stan::math::fill(Sigma_derived, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma_temp;
      Sigma_temp = Eigen::Matrix<double, -1, -1>(Sigma_temp_1dim__, Sigma_temp_2dim__);
      stan::math::fill(Sigma_temp, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> sigma12_vec;
      sigma12_vec = Eigen::Matrix<double, -1, -1>(sigma12_vec_1dim__, 1);
      stan::math::fill(sigma12_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> temp_sums;
      temp_sums = Eigen::Matrix<double, -1, -1>(temp_sums_1dim__, temp_sums_2dim__);
      stan::math::fill(temp_sums, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> temp_counts;
      temp_counts = Eigen::Matrix<double, -1, -1>(temp_counts_1dim__, temp_counts_2dim__);
      stan::math::fill(temp_counts, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> cond_sigma_vec;
      cond_sigma_vec = Eigen::Matrix<double, -1, 1>(cond_sigma_vec_1dim__);
      stan::math::fill(cond_sigma_vec, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> cond_mean_vec;
      cond_mean_vec = Eigen::Matrix<double, -1, 1>(cond_mean_vec_1dim__);
      stan::math::fill(cond_mean_vec, std::numeric_limits<double>::quiet_NaN());
      
      double sigma11;
      sigma11 = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> sigma_pro;
      sigma_pro = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(sigma_pro, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> spline_a_trans;
      spline_a_trans = Eigen::Matrix<double, -1, -1>(spline_a_trans_1dim__, spline_a_trans_2dim__);
      stan::math::fill(spline_a_trans, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, -1>> SigmaKnots;
      SigmaKnots = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(n_knots, n_knots));
      stan::math::fill(SigmaKnots, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> obs_cov_offset;
      obs_cov_offset = Eigen::Matrix<double, -1, 1>(n_pos);
      stan::math::fill(obs_cov_offset, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(devs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "devs"));}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(x0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        vars__.emplace_back(psi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        vars__.emplace_back(z[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
        vars__.emplace_back(zpos[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
          vars__.emplace_back(p_z[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(spline_a,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "spline_a"));
        }}
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
          vars__.emplace_back(
            rvalue(b_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "b_obs"));}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
          vars__.emplace_back(
            rvalue(b_pro,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "b_pro"));}}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_a[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        vars__.emplace_back(nb2_phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        vars__.emplace_back(nu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
        vars__.emplace_back(ymiss[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        vars__.emplace_back(gp_theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          vars__.emplace_back(
            rvalue(Lcorr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Lcorr"));}}
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_process[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
          vars__.emplace_back(effectsKnots[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 53;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 44;
        assign(sigma_pro, cons_list(index_uni(k), nil_index_list()), 1,
          "assigning variable sigma_pro");
        current_statement__ = 51;
        if (logical_eq(est_sigma_process, 1)) {
          current_statement__ = 49;
          if (logical_eq(n_sigma_process, 1)) {
            current_statement__ = 47;
            assign(sigma_pro, cons_list(index_uni(k), nil_index_list()),
              sigma_process[(1 - 1)], "assigning variable sigma_pro");
          } else {
            current_statement__ = 45;
            assign(sigma_pro, cons_list(index_uni(k), nil_index_list()),
              sigma_process[(k - 1)], "assigning variable sigma_pro");
          }
        } }
      current_statement__ = 62;
      if (logical_eq(est_phi, 1)) {
        current_statement__ = 60;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 58;
          assign(phi_vec, cons_list(index_uni(k), nil_index_list()),
            phi[(k - 1)], "assigning variable phi_vec");}
      } else {
        current_statement__ = 56;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 54;
          assign(phi_vec, cons_list(index_uni(k), nil_index_list()), 1,
            "assigning variable phi_vec");}
      }
      current_statement__ = 71;
      if (logical_eq(est_theta, 1)) {
        current_statement__ = 69;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 67;
          assign(theta_vec, cons_list(index_uni(k), nil_index_list()),
            theta[(k - 1)], "assigning variable theta_vec");}
      } else {
        current_statement__ = 65;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 63;
          assign(theta_vec, cons_list(index_uni(k), nil_index_list()), 0,
            "assigning variable theta_vec");}
      }
      current_statement__ = 76;
      if (logical_eq(est_sigma_params, 1)) {
        current_statement__ = 74;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 72;
          assign(sigma_vec, cons_list(index_uni(p), nil_index_list()),
            sigma[(varIndx[(p - 1)] - 1)], "assigning variable sigma_vec");}
      } 
      current_statement__ = 81;
      if (logical_eq(est_gamma_params, 1)) {
        current_statement__ = 79;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 77;
          assign(gamma_a_vec, cons_list(index_uni(p), nil_index_list()),
            gamma_a[(varIndx[(p - 1)] - 1)], "assigning variable gamma_a_vec");
        }
      } 
      current_statement__ = 86;
      if (logical_eq(est_nb2_params, 1)) {
        current_statement__ = 84;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 82;
          assign(nb_phi_vec, cons_list(index_uni(p), nil_index_list()),
            nb2_phi[(varIndx[(p - 1)] - 1)], "assigning variable nb_phi_vec");
        }
      } 
      current_statement__ = 96;
      if (logical_eq(long_format, 0)) {
        current_statement__ = 89;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 87;
          assign(yall,
            cons_list(index_uni(row_indx_pos[(i - 1)]),
              cons_list(index_uni(col_indx_pos[(i - 1)]), nil_index_list())),
            y[(i - 1)], "assigning variable yall");}
        current_statement__ = 94;
        if (logical_gt(n_na, 0)) {
          current_statement__ = 92;
          for (int i = 1; i <= n_na; ++i) {
            current_statement__ = 90;
            assign(yall,
              cons_list(index_uni(row_indx_na[(i - 1)]),
                cons_list(index_uni(col_indx_na[(i - 1)]), nil_index_list())),
              ymiss[(i - 1)], "assigning variable yall");}
        } 
      } 
      current_statement__ = 156;
      if (logical_eq(proportional_model, 0)) {
        current_statement__ = 99;
        for (int i = 1; i <= nZ; ++i) {
          current_statement__ = 97;
          assign(Z,
            cons_list(index_uni(row_indx[(i - 1)]),
              cons_list(index_uni(col_indx[(i - 1)]), nil_index_list())),
            z[(i - 1)], "assigning variable Z");}
        current_statement__ = 104;
        if (logical_gt(nZero, 2)) {
          current_statement__ = 102;
          for (int i = 1; i <= (nZero - 2); ++i) {
            current_statement__ = 100;
            assign(Z,
              cons_list(index_uni(row_indx_z[(i - 1)]),
                cons_list(index_uni(col_indx_z[(i - 1)]), nil_index_list())),
              0, "assigning variable Z");}
        } 
        current_statement__ = 107;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 105;
          assign(Z,
            cons_list(index_uni(k),
              cons_list(index_uni(k), nil_index_list())), zpos[(k - 1)],
            "assigning variable Z");}
        current_statement__ = 120;
        if (logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 118;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 112;
            if (logical_lt(zpos[(k - 1)], 0)) {
              current_statement__ = 110;
              assign(indicator, cons_list(index_uni(k), nil_index_list()),
                -1, "assigning variable indicator");
            } else {
              current_statement__ = 108;
              assign(indicator, cons_list(index_uni(k), nil_index_list()), 1,
                "assigning variable indicator");
            }
            current_statement__ = 113;
            assign(psi_root, cons_list(index_uni(k), nil_index_list()),
              stan::math::sqrt(psi[(k - 1)]), "assigning variable psi_root");
            current_statement__ = 116;
            for (int p = 1; p <= P; ++p) {
              current_statement__ = 114;
              assign(Z,
                cons_list(index_uni(p),
                  cons_list(index_uni(k), nil_index_list())),
                ((rvalue(Z,
                    cons_list(index_uni(p),
                      cons_list(index_uni(k), nil_index_list())), "Z") *
                   indicator[(k - 1)]) * (1 / psi_root[(k - 1)])),
                "assigning variable Z");}}
        } 
        current_statement__ = 128;
        if (logical_eq(est_rw, 1)) {
          current_statement__ = 126;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 121;
            assign(x,
              cons_list(index_uni(k),
                cons_list(index_uni(1), nil_index_list())), x0[(k - 1)],
              "assigning variable x");
            current_statement__ = 124;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 122;
              assign(x,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                ((phi_vec[(k - 1)] *
                   rvalue(x,
                     cons_list(index_uni(k),
                       cons_list(index_uni((t - 1)), nil_index_list())), "x"))
                  +
                  rvalue(devs,
                    cons_list(index_uni(k),
                      cons_list(index_uni((t - 1)), nil_index_list())),
                    "devs")), "assigning variable x");}}
        } 
        current_statement__ = 136;
        if (logical_eq(est_spline, 1)) {
          current_statement__ = 130;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 129;
            assign(spline_a_trans, cons_list(index_uni(k), nil_index_list()),
              multiply(
                rvalue(spline_a, cons_list(index_uni(k), nil_index_list()),
                  "spline_a"), sigma_pro[(k - 1)]),
              "assigning variable spline_a_trans");}
          current_statement__ = 131;
          assign(x, nil_index_list(),
            multiply(spline_a_trans, transpose(X_spline)),
            "assigning variable x");
          current_statement__ = 134;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 132;
            assign(x, cons_list(index_uni(k), nil_index_list()),
              add(x0[(k - 1)],
                stan::model::deep_copy(
                  rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"))),
              "assigning variable x");}
        } 
        current_statement__ = 149;
        if (logical_eq(est_gp, 1)) {
          current_statement__ = 147;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 137;
            assign(SigmaKnots, cons_list(index_uni(k), nil_index_list()),
              cov_exp_quad(knot_locs, sigma_pro[(k - 1)], gp_theta[(k - 1)]),
              "assigning variable SigmaKnots");
            current_statement__ = 140;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 138;
              assign(SigmaKnots,
                cons_list(index_uni(k),
                  cons_list(index_uni(i),
                    cons_list(index_uni(i), nil_index_list()))),
                (rvalue(SigmaKnots,
                   cons_list(index_uni(k),
                     cons_list(index_uni(i),
                       cons_list(index_uni(i), nil_index_list()))),
                   "SigmaKnots") + gp_delta), "assigning variable SigmaKnots");
            }
            current_statement__ = 145;
            if (logical_eq(n_knots, N)) {
              current_statement__ = 143;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(cholesky_decompose(SigmaKnots[(k - 1)]),
                    effectsKnots[(k - 1)])), "assigning variable x");
            } else {
              current_statement__ = 141;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(
                    multiply(
                      multiply(
                        cov_exp_quad(data_locs, knot_locs,
                          sigma_pro[(k - 1)], gp_theta[(k - 1)]),
                        inverse_spd(SigmaKnots[(k - 1)])),
                      cholesky_decompose(SigmaKnots[(k - 1)])),
                    effectsKnots[(k - 1)])), "assigning variable x");
            }}
        } 
        current_statement__ = 154;
        if (logical_eq(use_expansion_prior, 1)) {
          current_statement__ = 152;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 150;
            assign(x, cons_list(index_uni(k), nil_index_list()),
              multiply(
                multiply(
                  stan::model::deep_copy(
                    rvalue(x, cons_list(index_uni(k), nil_index_list()), "x")),
                  indicator[(k - 1)]), psi_root[(k - 1)]),
              "assigning variable x");}
        } 
      } 
      current_statement__ = 190;
      if (logical_eq(proportional_model, 1)) {
        current_statement__ = 164;
        if (logical_eq(est_rw, 1)) {
          current_statement__ = 162;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 157;
            assign(x,
              cons_list(index_uni(k),
                cons_list(index_uni(1), nil_index_list())), x0[(k - 1)],
              "assigning variable x");
            current_statement__ = 160;
            for (int t = 2; t <= N; ++t) {
              current_statement__ = 158;
              assign(x,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                ((phi_vec[(k - 1)] *
                   rvalue(x,
                     cons_list(index_uni(k),
                       cons_list(index_uni((t - 1)), nil_index_list())), "x"))
                  +
                  rvalue(devs,
                    cons_list(index_uni(k),
                      cons_list(index_uni((t - 1)), nil_index_list())),
                    "devs")), "assigning variable x");}}
        } 
        current_statement__ = 172;
        if (logical_eq(est_spline, 1)) {
          current_statement__ = 166;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 165;
            assign(spline_a_trans, cons_list(index_uni(k), nil_index_list()),
              multiply(
                rvalue(spline_a, cons_list(index_uni(k), nil_index_list()),
                  "spline_a"), sigma_pro[(k - 1)]),
              "assigning variable spline_a_trans");}
          current_statement__ = 167;
          assign(x, nil_index_list(),
            multiply(spline_a_trans, transpose(X_spline)),
            "assigning variable x");
          current_statement__ = 170;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 168;
            assign(x, cons_list(index_uni(k), nil_index_list()),
              add(x0[(k - 1)],
                stan::model::deep_copy(
                  rvalue(x, cons_list(index_uni(k), nil_index_list()), "x"))),
              "assigning variable x");}
        } 
        current_statement__ = 185;
        if (logical_eq(est_gp, 1)) {
          current_statement__ = 183;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 173;
            assign(SigmaKnots, cons_list(index_uni(k), nil_index_list()),
              cov_exp_quad(knot_locs, sigma_pro[(k - 1)], gp_theta[(k - 1)]),
              "assigning variable SigmaKnots");
            current_statement__ = 176;
            for (int i = 1; i <= n_knots; ++i) {
              current_statement__ = 174;
              assign(SigmaKnots,
                cons_list(index_uni(k),
                  cons_list(index_uni(i),
                    cons_list(index_uni(i), nil_index_list()))),
                (rvalue(SigmaKnots,
                   cons_list(index_uni(k),
                     cons_list(index_uni(i),
                       cons_list(index_uni(i), nil_index_list()))),
                   "SigmaKnots") + gp_delta), "assigning variable SigmaKnots");
            }
            current_statement__ = 181;
            if (logical_eq(n_knots, N)) {
              current_statement__ = 179;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(cholesky_decompose(SigmaKnots[(k - 1)]),
                    effectsKnots[(k - 1)])), "assigning variable x");
            } else {
              current_statement__ = 177;
              assign(x, cons_list(index_uni(k), nil_index_list()),
                to_row_vector(
                  multiply(
                    multiply(
                      multiply(
                        cov_exp_quad(data_locs, knot_locs,
                          sigma_pro[(k - 1)], gp_theta[(k - 1)]),
                        inverse_spd(SigmaKnots[(k - 1)])),
                      cholesky_decompose(SigmaKnots[(k - 1)])),
                    effectsKnots[(k - 1)])), "assigning variable x");
            }}
        } 
        current_statement__ = 188;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 186;
          assign(Z, cons_list(index_uni(p), nil_index_list()),
            to_row_vector(p_z[(p - 1)]), "assigning variable Z");}
      } 
      current_statement__ = 195;
      if (logical_gt(num_pro_covar, 0)) {
        current_statement__ = 193;
        for (int i = 1; i <= num_pro_covar; ++i) {
          current_statement__ = 191;
          assign(x,
            cons_list(index_uni(pro_covar_index[(i - 1)][(2 - 1)]),
              cons_list(index_uni(pro_covar_index[(i - 1)][(1 - 1)]),
                nil_index_list())),
            (rvalue(x,
               cons_list(index_uni(pro_covar_index[(i - 1)][(2 - 1)]),
                 cons_list(index_uni(pro_covar_index[(i - 1)][(1 - 1)]),
                   nil_index_list())), "x") +
              (rvalue(b_pro,
                 cons_list(index_uni(pro_covar_index[(i - 1)][(3 - 1)]),
                   cons_list(index_uni(pro_covar_index[(i - 1)][(2 - 1)]),
                     nil_index_list())), "b_pro") * pro_covar_value[(i - 1)])),
            "assigning variable x");}
      } 
      current_statement__ = 196;
      assign(pred, nil_index_list(), multiply(Z, x),
        "assigning variable pred");
      current_statement__ = 199;
      for (int i = 1; i <= n_pos; ++i) {
        current_statement__ = 197;
        assign(obs_cov_offset, cons_list(index_uni(i), nil_index_list()), 0,
          "assigning variable obs_cov_offset");}
      current_statement__ = 210;
      if (logical_gt(num_obs_covar, 0)) {
        current_statement__ = 208;
        if (logical_eq(long_format, 0)) {
          current_statement__ = 206;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 204;
            assign(pred,
              cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                cons_list(index_uni(obs_covar_index[(i - 1)][(1 - 1)]),
                  nil_index_list())),
              (rvalue(pred,
                 cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                   cons_list(index_uni(obs_covar_index[(i - 1)][(1 - 1)]),
                     nil_index_list())), "pred") +
                (rvalue(b_obs,
                   cons_list(index_uni(obs_covar_index[(i - 1)][(3 - 1)]),
                     cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                       nil_index_list())), "b_obs") *
                  obs_covar_value[(i - 1)])), "assigning variable pred");}
        } else {
          current_statement__ = 202;
          for (int i = 1; i <= num_obs_covar; ++i) {
            current_statement__ = 200;
            assign(obs_cov_offset,
              cons_list(index_uni(match_obs_covar[(i - 1)]),
                nil_index_list()),
              (obs_cov_offset[(match_obs_covar[(i - 1)] - 1)] +
                (rvalue(b_obs,
                   cons_list(index_uni(obs_covar_index[(i - 1)][(3 - 1)]),
                     cons_list(index_uni(obs_covar_index[(i - 1)][(2 - 1)]),
                       nil_index_list())), "b_obs") *
                  obs_covar_value[(i - 1)])),
              "assigning variable obs_cov_offset");}
        }
      } 
      current_statement__ = 235;
      if ((primitive_value(logical_eq(long_format, 1)) && primitive_value(
          logical_eq(est_cor, 1)))) {
        current_statement__ = 216;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 214;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 211;
            assign(temp_sums,
              cons_list(index_uni(p),
                cons_list(index_uni(n), nil_index_list())), 0.0,
              "assigning variable temp_sums");
            current_statement__ = 212;
            assign(temp_counts,
              cons_list(index_uni(p),
                cons_list(index_uni(n), nil_index_list())), 0.0,
              "assigning variable temp_counts");}}
        current_statement__ = 220;
        for (int i = 1; i <= n_pos; ++i) {
          current_statement__ = 217;
          assign(temp_sums,
            cons_list(index_uni(row_indx_pos[(i - 1)]),
              cons_list(index_uni(col_indx_pos[(i - 1)]), nil_index_list())),
            (rvalue(temp_sums,
               cons_list(index_uni(row_indx_pos[(i - 1)]),
                 cons_list(index_uni(col_indx_pos[(i - 1)]),
                   nil_index_list())), "temp_sums") +
              (y[(i - 1)] -
                rvalue(pred,
                  cons_list(index_uni(row_indx_pos[(i - 1)]),
                    cons_list(index_uni(col_indx_pos[(i - 1)]),
                      nil_index_list())), "pred"))),
            "assigning variable temp_sums");
          current_statement__ = 218;
          assign(temp_counts,
            cons_list(index_uni(row_indx_pos[(i - 1)]),
              cons_list(index_uni(col_indx_pos[(i - 1)]), nil_index_list())),
            (rvalue(temp_counts,
               cons_list(index_uni(row_indx_pos[(i - 1)]),
                 cons_list(index_uni(col_indx_pos[(i - 1)]),
                   nil_index_list())), "temp_counts") + 1),
            "assigning variable temp_counts");}
        current_statement__ = 225;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 223;
          for (int p = 1; p <= P; ++p) {
            current_statement__ = 221;
            assign(temp_sums,
              cons_list(index_uni(p),
                cons_list(index_uni(n), nil_index_list())),
              (rvalue(temp_sums,
                 cons_list(index_uni(p),
                   cons_list(index_uni(n), nil_index_list())), "temp_sums") /
                rvalue(temp_counts,
                  cons_list(index_uni(p),
                    cons_list(index_uni(n), nil_index_list())),
                  "temp_counts")), "assigning variable temp_sums");}}
        current_statement__ = 226;
        assign(Sigma_derived, nil_index_list(),
          quad_form_diag(multiply_lower_tri_self_transpose(Lcorr), sigma_vec),
          "assigning variable Sigma_derived");
        current_statement__ = 233;
        for (int p = 1; p <= P; ++p) {
          current_statement__ = 227;
          sigma11 = rvalue(Sigma_derived,
                      cons_list(index_uni(p),
                        cons_list(index_uni(p), nil_index_list())),
                      "Sigma_derived");
          current_statement__ = 228;
          assign(Sigma_temp, nil_index_list(),
            inverse(subset(Sigma_derived, p, P, pstream__)),
            "assigning variable Sigma_temp");
          current_statement__ = 229;
          assign(sigma12_vec, nil_index_list(),
            subsetvec(Sigma_derived, p, P, pstream__),
            "assigning variable sigma12_vec");
          current_statement__ = 230;
          assign(cond_mean_vec, cons_list(index_uni(p), nil_index_list()),
            multiply(multiply(to_row_vector(sigma12_vec), Sigma_temp),
              to_vector(subsetvec2(col(temp_sums, p), p, P, pstream__))),
            "assigning variable cond_mean_vec");
          current_statement__ = 231;
          assign(cond_sigma_vec, cons_list(index_uni(p), nil_index_list()),
            stan::math::sqrt(
              (sigma11 -
                multiply(multiply(to_row_vector(sigma12_vec), Sigma_temp),
                  to_vector(sigma12_vec)))),
            "assigning variable cond_sigma_vec");}
      } 
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
        current_statement__ = 24;
        current_statement__ = 24;
        check_greater_or_equal(function__, "sigma_vec[sym1__]",
                               sigma_vec[(sym1__ - 1)], 0);}
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
        current_statement__ = 25;
        current_statement__ = 25;
        check_greater_or_equal(function__, "gamma_a_vec[sym1__]",
                               gamma_a_vec[(sym1__ - 1)], 0);}
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "nb_phi_vec[sym1__]",
                               nb_phi_vec[(sym1__ - 1)], 0);}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
        current_statement__ = 31;
        current_statement__ = 31;
        check_greater_or_equal(function__, "psi_root[sym1__]",
                               psi_root[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            vars__.emplace_back(
              rvalue(pred,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "pred"));}
        }
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            vars__.emplace_back(
              rvalue(Z,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "Z"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            vars__.emplace_back(
              rvalue(yall,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "yall"));}
        }
        for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
          vars__.emplace_back(sigma_vec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
          vars__.emplace_back(gamma_a_vec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
          vars__.emplace_back(nb_phi_vec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(phi_vec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(theta_vec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            vars__.emplace_back(
              rvalue(x,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "x"));}}
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(indicator[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
          vars__.emplace_back(psi_root[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= Sigma_derived_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Sigma_derived_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(Sigma_derived,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "Sigma_derived"));}}
        for (int sym1__ = 1; sym1__ <= Sigma_temp_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Sigma_temp_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(Sigma_temp,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "Sigma_temp"));}}
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= sigma12_vec_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(sigma12_vec,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "sigma12_vec"));}}
        for (int sym1__ = 1; sym1__ <= temp_sums_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= temp_sums_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(temp_sums,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "temp_sums"));}}
        for (int sym1__ = 1; sym1__ <= temp_counts_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= temp_counts_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(temp_counts,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "temp_counts"));}}
        for (int sym1__ = 1; sym1__ <= cond_sigma_vec_1dim__; ++sym1__) {
          vars__.emplace_back(cond_sigma_vec[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= cond_mean_vec_1dim__; ++sym1__) {
          vars__.emplace_back(cond_mean_vec[(sym1__ - 1)]);}
        vars__.emplace_back(sigma11);
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(sigma_pro[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= spline_a_trans_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= spline_a_trans_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(spline_a_trans,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "spline_a_trans"));}}
        for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              vars__.emplace_back(
                rvalue(SigmaKnots,
                  cons_list(index_uni(sym3__),
                    cons_list(index_uni(sym2__),
                      cons_list(index_uni(sym1__), nil_index_list()))),
                  "SigmaKnots"));}}}
        for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
          vars__.emplace_back(obs_cov_offset[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(n_loglik);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Omega;
      Omega = Eigen::Matrix<double, -1, -1>(n_pcor, n_pcor);
      stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(n_pcor, n_pcor);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> xstar;
      xstar = Eigen::Matrix<double, -1, -1>(K, 1);
      stan::math::fill(xstar, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> future_devs;
      future_devs = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(future_devs, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> SigmaKnots_pred;
      SigmaKnots_pred = Eigen::Matrix<double, -1, -1>(n_knots, n_knots);
      stan::math::fill(SigmaKnots_pred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> SigmaOffDiag_pred;
      SigmaOffDiag_pred = Eigen::Matrix<double, 1, -1>(n_knots);
      stan::math::fill(SigmaOffDiag_pred, std::numeric_limits<double>::quiet_NaN());
      
      int j;
      j = std::numeric_limits<int>::min();
      
      current_statement__ = 244;
      j = 0;
      current_statement__ = 248;
      if (logical_eq(est_cor, 1)) {
        current_statement__ = 245;
        assign(Omega, nil_index_list(),
          multiply_lower_tri_self_transpose(Lcorr),
          "assigning variable Omega");
        current_statement__ = 246;
        assign(Sigma, nil_index_list(), quad_form_diag(Omega, sigma_vec),
          "assigning variable Sigma");
      } 
      current_statement__ = 294;
      if (logical_eq(est_cor, 0)) {
        current_statement__ = 292;
        if (logical_eq(long_format, 0)) {
          current_statement__ = 284;
          j = 0;
          current_statement__ = 290;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 288;
            for (int p = 1; p <= P; ++p) {
              current_statement__ = 285;
              j = (j + 1);
              current_statement__ = 286;
              assign(log_lik, cons_list(index_uni(j), nil_index_list()),
                normal_lpdf<false>(
                  rvalue(yall,
                    cons_list(index_uni(p),
                      cons_list(index_uni(n), nil_index_list())), "yall"),
                  rvalue(pred,
                    cons_list(index_uni(p),
                      cons_list(index_uni(n), nil_index_list())), "pred"),
                  sigma_vec[(p - 1)]), "assigning variable log_lik");}}
        } else {
          current_statement__ = 262;
          if (logical_eq(obs_model, 1)) {
            current_statement__ = 260;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 259;
              assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                normal_lpdf<false>(y[(i - 1)],
                  ((offset[(i - 1)] +
                     rvalue(pred,
                       cons_list(index_uni(row_indx_pos[(i - 1)]),
                         cons_list(index_uni(col_indx_pos[(i - 1)]),
                           nil_index_list())), "pred")) +
                    obs_cov_offset[(i - 1)]),
                  stan::math::exp(
                    (stan::math::log(sigma_vec[(row_indx_pos[(i - 1)] - 1)])
                      - log_weights_vec[(i - 1)]))),
                "assigning variable log_lik");}
          } 
          current_statement__ = 266;
          if (logical_eq(obs_model, 2)) {
            current_statement__ = 264;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 263;
              assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                gamma_lpdf<false>(y[(i - 1)],
                  gamma_a_vec[(row_indx_pos[(i - 1)] - 1)],
                  (gamma_a_vec[(row_indx_pos[(i - 1)] - 1)] /
                    stan::math::exp(
                      ((offset[(i - 1)] +
                         rvalue(pred,
                           cons_list(index_uni(row_indx_pos[(i - 1)]),
                             cons_list(index_uni(col_indx_pos[(i - 1)]),
                               nil_index_list())), "pred")) +
                        obs_cov_offset[(i - 1)])))),
                "assigning variable log_lik");}
          } 
          current_statement__ = 270;
          if (logical_eq(obs_model, 3)) {
            current_statement__ = 268;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 267;
              assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                poisson_log_lpmf<false>(y_int[(i - 1)],
                  ((offset[(i - 1)] +
                     rvalue(pred,
                       cons_list(index_uni(row_indx_pos[(i - 1)]),
                         cons_list(index_uni(col_indx_pos[(i - 1)]),
                           nil_index_list())), "pred")) +
                    obs_cov_offset[(i - 1)])), "assigning variable log_lik");
            }
          } 
          current_statement__ = 274;
          if (logical_eq(obs_model, 4)) {
            current_statement__ = 272;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 271;
              assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                neg_binomial_2_log_lpmf<false>(y_int[(i - 1)],
                  ((offset[(i - 1)] +
                     rvalue(pred,
                       cons_list(index_uni(row_indx_pos[(i - 1)]),
                         cons_list(index_uni(col_indx_pos[(i - 1)]),
                           nil_index_list())), "pred")) +
                    obs_cov_offset[(i - 1)]),
                  nb_phi_vec[(row_indx_pos[(i - 1)] - 1)]),
                "assigning variable log_lik");}
          } 
          current_statement__ = 278;
          if (logical_eq(obs_model, 5)) {
            current_statement__ = 276;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 275;
              assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                bernoulli_logit_lpmf<false>(y_int[(i - 1)],
                  ((offset[(i - 1)] +
                     rvalue(pred,
                       cons_list(index_uni(row_indx_pos[(i - 1)]),
                         cons_list(index_uni(col_indx_pos[(i - 1)]),
                           nil_index_list())), "pred")) +
                    obs_cov_offset[(i - 1)])), "assigning variable log_lik");
            }
          } 
          current_statement__ = 282;
          if (logical_eq(obs_model, 6)) {
            current_statement__ = 280;
            for (int i = 1; i <= n_pos; ++i) {
              current_statement__ = 279;
              assign(log_lik, cons_list(index_uni(i), nil_index_list()),
                lognormal_lpdf<false>(y[(i - 1)],
                  (offset[(i - 1)] +
                    rvalue(pred,
                      cons_list(index_uni(row_indx_pos[(i - 1)]),
                        cons_list(index_uni(col_indx_pos[(i - 1)]),
                          nil_index_list())), "pred")),
                  (sigma_vec[(row_indx_pos[(i - 1)] - 1)] +
                    obs_cov_offset[(i - 1)])), "assigning variable log_lik");
            }
          } 
        }
      } else {
        current_statement__ = 257;
        if (logical_eq(long_format, 0)) {
          current_statement__ = 255;
          for (int i = 1; i <= N; ++i) {
            current_statement__ = 253;
            assign(log_lik, cons_list(index_uni(i), nil_index_list()),
              multi_normal_cholesky_lpdf<false>(col(yall, i), col(pred, i),
                diag_pre_multiply(sigma_vec, Lcorr)),
              "assigning variable log_lik");}
        } else {
          current_statement__ = 251;
          for (int i = 1; i <= n_pos; ++i) {
            current_statement__ = 249;
            assign(log_lik, cons_list(index_uni(i), nil_index_list()),
              normal_lpdf<false>(y[(i - 1)],
                (((offset[(i - 1)] +
                    rvalue(pred,
                      cons_list(index_uni(row_indx_pos[(i - 1)]),
                        cons_list(index_uni(col_indx_pos[(i - 1)]),
                          nil_index_list())), "pred")) +
                   obs_cov_offset[(i - 1)]) +
                  cond_mean_vec[(row_indx_pos[(i - 1)] - 1)]),
                stan::math::exp(
                  (stan::math::log(
                     cond_sigma_vec[(row_indx_pos[(i - 1)] - 1)]) -
                    log_weights_vec[(i - 1)]))), "assigning variable log_lik");
          }
        }
      }
      current_statement__ = 297;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 295;
        assign(future_devs, cons_list(index_uni(k), nil_index_list()), 0,
          "assigning variable future_devs");}
      current_statement__ = 311;
      if (logical_eq(est_rw, 1)) {
        current_statement__ = 309;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 306;
          if (logical_eq(use_normal, 0)) {
            current_statement__ = 304;
            if (logical_eq(estimate_nu, 1)) {
              current_statement__ = 302;
              assign(future_devs, cons_list(index_uni(k), nil_index_list()),
                student_t_rng(nu[(1 - 1)],
                  (theta_vec[(k - 1)] *
                    rvalue(devs,
                      cons_list(index_uni(k),
                        cons_list(index_uni((N - 1)), nil_index_list())),
                      "devs")), sigma_pro[(k - 1)], base_rng__),
                "assigning variable future_devs");
            } else {
              current_statement__ = 300;
              assign(future_devs, cons_list(index_uni(k), nil_index_list()),
                student_t_rng(nu_fixed,
                  (theta_vec[(k - 1)] *
                    rvalue(devs,
                      cons_list(index_uni(k),
                        cons_list(index_uni((N - 1)), nil_index_list())),
                      "devs")), sigma_pro[(k - 1)], base_rng__),
                "assigning variable future_devs");
            }
          } else {
            current_statement__ = 298;
            assign(future_devs, cons_list(index_uni(k), nil_index_list()),
              normal_rng(
                (theta_vec[(k - 1)] *
                  rvalue(devs,
                    cons_list(index_uni(k),
                      cons_list(index_uni((N - 1)), nil_index_list())),
                    "devs")), sigma_pro[(k - 1)], base_rng__),
              "assigning variable future_devs");
          }
          current_statement__ = 307;
          assign(xstar,
            cons_list(index_uni(k),
              cons_list(index_uni(1), nil_index_list())),
            (rvalue(x,
               cons_list(index_uni(k),
                 cons_list(index_uni(N), nil_index_list())), "x") +
              future_devs[(k - 1)]), "assigning variable xstar");}
      } 
      current_statement__ = 316;
      if (logical_eq(est_spline, 1)) {
        current_statement__ = 314;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 312;
          assign(xstar,
            cons_list(index_uni(k),
              cons_list(index_uni(1), nil_index_list())),
            (rvalue(spline_a_trans,
               cons_list(index_uni(k),
                 cons_list(index_uni(n_knots), nil_index_list())),
               "spline_a_trans") *
              rvalue(X_spline,
                cons_list(index_uni(N),
                  cons_list(index_uni(n_knots), nil_index_list())),
                "X_spline")), "assigning variable xstar");}
      } 
      current_statement__ = 326;
      if (logical_eq(est_gp, 1)) {
        current_statement__ = 324;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 317;
          assign(SigmaKnots_pred, nil_index_list(),
            cov_exp_quad(knot_locs, sigma_pro[(k - 1)], gp_theta[(k - 1)]),
            "assigning variable SigmaKnots_pred");
          current_statement__ = 320;
          for (int i = 1; i <= n_knots; ++i) {
            current_statement__ = 318;
            assign(SigmaKnots_pred,
              cons_list(index_uni(i),
                cons_list(index_uni(i), nil_index_list())),
              (rvalue(SigmaKnots_pred,
                 cons_list(index_uni(i),
                   cons_list(index_uni(i), nil_index_list())),
                 "SigmaKnots_pred") + gp_delta),
              "assigning variable SigmaKnots_pred");}
          current_statement__ = 321;
          assign(SigmaOffDiag_pred, nil_index_list(),
            multiply(
              to_row_vector(
                multiply(square(sigma_pro[(k - 1)]),
                  stan::math::exp(
                    divide(minus(distKnots21_pred),
                      (2.0 * pow(gp_theta[(k - 1)], 2.0)))))),
              inverse_spd(SigmaKnots_pred)),
            "assigning variable SigmaOffDiag_pred");
          current_statement__ = 322;
          assign(xstar,
            cons_list(index_uni(k),
              cons_list(index_uni(1), nil_index_list())),
            multiply(
              multiply(SigmaOffDiag_pred,
                cholesky_decompose(SigmaKnots[(k - 1)])),
              effectsKnots[(k - 1)]), "assigning variable xstar");}
      } 
      current_statement__ = 243;
      current_statement__ = 243;
      check_greater_or_equal(function__, "j", j, 0);
      for (int sym1__ = 1; sym1__ <= n_loglik; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          vars__.emplace_back(
            rvalue(Omega,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Omega"));}}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Sigma"));}}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(
            rvalue(xstar,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "xstar"));}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(future_devs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
          vars__.emplace_back(
            rvalue(SigmaKnots_pred,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "SigmaKnots_pred"));}}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        vars__.emplace_back(SigmaOffDiag_pred[(sym1__ - 1)]);}
      vars__.emplace_back(j);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> devs;
      devs = Eigen::Matrix<double, -1, -1>(devs_1dim__, devs_2dim__);
      stan::math::fill(devs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> devs_flat__;
        current_statement__ = 1;
        assign(devs_flat__, nil_index_list(), context__.vals_r("devs"),
          "assigning variable devs_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
            current_statement__ = 1;
            assign(devs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              devs_flat__[(pos__ - 1)], "assigning variable devs");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> x0;
      x0 = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(x0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x0_flat__;
        current_statement__ = 2;
        assign(x0_flat__, nil_index_list(), context__.vals_r("x0"),
          "assigning variable x0_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          assign(x0, cons_list(index_uni(sym1__), nil_index_list()),
            x0_flat__[(pos__ - 1)], "assigning variable x0");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi;
      psi = Eigen::Matrix<double, -1, 1>(psi_1dim__);
      stan::math::fill(psi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> psi_flat__;
        current_statement__ = 3;
        assign(psi_flat__, nil_index_list(), context__.vals_r("psi"),
          "assigning variable psi_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(psi, cons_list(index_uni(sym1__), nil_index_list()),
            psi_flat__[(pos__ - 1)], "assigning variable psi");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> psi_free__;
      psi_free__ = Eigen::Matrix<double, -1, 1>(psi_1dim__);
      stan::math::fill(psi_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(psi_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(psi[(sym1__ - 1)], 0),
          "assigning variable psi_free__");}
      Eigen::Matrix<double, -1, 1> z;
      z = Eigen::Matrix<double, -1, 1>(z_1dim__);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 4;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
          current_statement__ = 4;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            z_flat__[(pos__ - 1)], "assigning variable z");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_free__;
      z_free__ = Eigen::Matrix<double, -1, 1>(z_1dim__);
      stan::math::fill(z_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(z_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(z[(sym1__ - 1)], z_bound[(1 - 1)],
            z_bound[(2 - 1)]), "assigning variable z_free__");}
      Eigen::Matrix<double, -1, 1> zpos;
      zpos = Eigen::Matrix<double, -1, 1>(zpos_1dim__);
      stan::math::fill(zpos, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> zpos_flat__;
        current_statement__ = 5;
        assign(zpos_flat__, nil_index_list(), context__.vals_r("zpos"),
          "assigning variable zpos_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(zpos, cons_list(index_uni(sym1__), nil_index_list()),
            zpos_flat__[(pos__ - 1)], "assigning variable zpos");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> zpos_free__;
      zpos_free__ = Eigen::Matrix<double, -1, 1>(zpos_1dim__);
      stan::math::fill(zpos_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(zpos_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(zpos[(sym1__ - 1)], lower_bound_z),
          "assigning variable zpos_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> p_z;
      p_z = std::vector<Eigen::Matrix<double, -1, 1>>(p_z_1dim__, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(p_z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_z_flat__;
        current_statement__ = 6;
        assign(p_z_flat__, nil_index_list(), context__.vals_r("p_z"),
          "assigning variable p_z_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
            current_statement__ = 6;
            assign(p_z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              p_z_flat__[(pos__ - 1)], "assigning variable p_z");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> p_z_free__;
      p_z_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(p_z_1dim__, Eigen::Matrix<double, -1, 1>(
        (K - 1)));
      stan::math::fill(p_z_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= p_z_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(p_z_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_free(p_z[(sym1__ - 1)]),
          "assigning variable p_z_free__");}
      Eigen::Matrix<double, -1, -1> spline_a;
      spline_a = Eigen::Matrix<double, -1, -1>(spline_a_1dim__, spline_a_2dim__);
      stan::math::fill(spline_a, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> spline_a_flat__;
        current_statement__ = 7;
        assign(spline_a_flat__, nil_index_list(),
          context__.vals_r("spline_a"), "assigning variable spline_a_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
            current_statement__ = 7;
            assign(spline_a,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              spline_a_flat__[(pos__ - 1)], "assigning variable spline_a");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> b_obs;
      b_obs = Eigen::Matrix<double, -1, -1>(n_obs_covar, P);
      stan::math::fill(b_obs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_obs_flat__;
        current_statement__ = 8;
        assign(b_obs_flat__, nil_index_list(), context__.vals_r("b_obs"),
          "assigning variable b_obs_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
            current_statement__ = 8;
            assign(b_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              b_obs_flat__[(pos__ - 1)], "assigning variable b_obs");
            current_statement__ = 8;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, -1> b_pro;
      b_pro = Eigen::Matrix<double, -1, -1>(n_pro_covar, K);
      stan::math::fill(b_pro, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_pro_flat__;
        current_statement__ = 9;
        assign(b_pro_flat__, nil_index_list(), context__.vals_r("b_pro"),
          "assigning variable b_pro_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
            current_statement__ = 9;
            assign(b_pro,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              b_pro_flat__[(pos__ - 1)], "assigning variable b_pro");
            current_statement__ = 9;
            pos__ = (pos__ + 1);}}
      }
      std::vector<double> sigma;
      sigma = std::vector<double>(sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(sigma, nil_index_list(), context__.vals_r("sigma"),
        "assigning variable sigma");
      std::vector<double> sigma_free__;
      sigma_free__ = std::vector<double>(sigma_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 10;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      std::vector<double> gamma_a;
      gamma_a = std::vector<double>(gamma_a_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(gamma_a, nil_index_list(), context__.vals_r("gamma_a"),
        "assigning variable gamma_a");
      std::vector<double> gamma_a_free__;
      gamma_a_free__ = std::vector<double>(gamma_a_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(gamma_a_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gamma_a[(sym1__ - 1)], 0),
          "assigning variable gamma_a_free__");}
      std::vector<double> nb2_phi;
      nb2_phi = std::vector<double>(nb2_phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(nb2_phi, nil_index_list(), context__.vals_r("nb2_phi"),
        "assigning variable nb2_phi");
      std::vector<double> nb2_phi_free__;
      nb2_phi_free__ = std::vector<double>(nb2_phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        current_statement__ = 12;
        assign(nb2_phi_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(nb2_phi[(sym1__ - 1)], 0),
          "assigning variable nb2_phi_free__");}
      std::vector<double> nu;
      nu = std::vector<double>(estimate_nu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(nu, nil_index_list(), context__.vals_r("nu"),
        "assigning variable nu");
      std::vector<double> nu_free__;
      nu_free__ = std::vector<double>(estimate_nu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        current_statement__ = 13;
        assign(nu_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(nu[(sym1__ - 1)], 2),
          "assigning variable nu_free__");}
      std::vector<double> ymiss;
      ymiss = std::vector<double>(n_na, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      assign(ymiss, nil_index_list(), context__.vals_r("ymiss"),
        "assigning variable ymiss");
      std::vector<double> phi;
      phi = std::vector<double>(phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      assign(phi, nil_index_list(), context__.vals_r("phi"),
        "assigning variable phi");
      std::vector<double> phi_free__;
      phi_free__ = std::vector<double>(phi_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 15;
        assign(phi_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(phi[(sym1__ - 1)], -1, 1),
          "assigning variable phi_free__");}
      std::vector<double> theta;
      theta = std::vector<double>(theta_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      assign(theta, nil_index_list(), context__.vals_r("theta"),
        "assigning variable theta");
      std::vector<double> theta_free__;
      theta_free__ = std::vector<double>(theta_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        current_statement__ = 16;
        assign(theta_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(theta[(sym1__ - 1)], -1, 1),
          "assigning variable theta_free__");}
      std::vector<double> gp_theta;
      gp_theta = std::vector<double>(gp_theta_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(gp_theta, nil_index_list(), context__.vals_r("gp_theta"),
        "assigning variable gp_theta");
      std::vector<double> gp_theta_free__;
      gp_theta_free__ = std::vector<double>(gp_theta_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        current_statement__ = 17;
        assign(gp_theta_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gp_theta[(sym1__ - 1)], 0),
          "assigning variable gp_theta_free__");}
      Eigen::Matrix<double, -1, -1> Lcorr;
      Lcorr = Eigen::Matrix<double, -1, -1>(n_pcor, n_pcor);
      stan::math::fill(Lcorr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Lcorr_flat__;
        current_statement__ = 18;
        assign(Lcorr_flat__, nil_index_list(), context__.vals_r("Lcorr"),
          "assigning variable Lcorr_flat__");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
            current_statement__ = 18;
            assign(Lcorr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Lcorr_flat__[(pos__ - 1)], "assigning variable Lcorr");
            current_statement__ = 18;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> Lcorr_free__;
      Lcorr_free__ = Eigen::Matrix<double, -1, 1>(((n_pcor * (n_pcor - 1)) /
                                                    2));
      stan::math::fill(Lcorr_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(Lcorr_free__, nil_index_list(),
        stan::math::cholesky_corr_free(Lcorr),
        "assigning variable Lcorr_free__");
      std::vector<double> sigma_process;
      sigma_process = std::vector<double>(sigma_process_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      assign(sigma_process, nil_index_list(),
        context__.vals_r("sigma_process"), "assigning variable sigma_process");
      std::vector<double> sigma_process_free__;
      sigma_process_free__ = std::vector<double>(sigma_process_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        current_statement__ = 19;
        assign(sigma_process_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_process[(sym1__ - 1)], 0),
          "assigning variable sigma_process_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> effectsKnots;
      effectsKnots = std::vector<Eigen::Matrix<double, -1, 1>>(effectsKnots_1dim__, Eigen::Matrix<double, -1, 1>(effectsKnots_2dim__));
      stan::math::fill(effectsKnots, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> effectsKnots_flat__;
        current_statement__ = 20;
        assign(effectsKnots_flat__, nil_index_list(),
          context__.vals_r("effectsKnots"),
          "assigning variable effectsKnots_flat__");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
            current_statement__ = 20;
            assign(effectsKnots,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              effectsKnots_flat__[(pos__ - 1)],
              "assigning variable effectsKnots");
            current_statement__ = 20;
            pos__ = (pos__ + 1);}}
      }
      for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(devs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "devs"));}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(x0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
        vars__.emplace_back(psi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        vars__.emplace_back(z_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
        vars__.emplace_back(zpos_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p_z_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (K - 1); ++sym2__) {
          vars__.emplace_back(p_z_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
          vars__.emplace_back(
            rvalue(spline_a,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "spline_a"));
        }}
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
          vars__.emplace_back(
            rvalue(b_obs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "b_obs"));}}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
          vars__.emplace_back(
            rvalue(b_pro,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "b_pro"));}}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
        vars__.emplace_back(gamma_a_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
        vars__.emplace_back(nb2_phi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
        vars__.emplace_back(nu_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
        vars__.emplace_back(ymiss[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        vars__.emplace_back(theta_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
        vars__.emplace_back(gp_theta_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((n_pcor * (n_pcor - 1)) / 2); ++sym1__) {
        vars__.emplace_back(Lcorr_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_process_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= effectsKnots_1dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= effectsKnots_2dim__; ++sym2__) {
          vars__.emplace_back(effectsKnots[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("devs");
    names__.emplace_back("x0");
    names__.emplace_back("psi");
    names__.emplace_back("z");
    names__.emplace_back("zpos");
    names__.emplace_back("p_z");
    names__.emplace_back("spline_a");
    names__.emplace_back("b_obs");
    names__.emplace_back("b_pro");
    names__.emplace_back("sigma");
    names__.emplace_back("gamma_a");
    names__.emplace_back("nb2_phi");
    names__.emplace_back("nu");
    names__.emplace_back("ymiss");
    names__.emplace_back("phi");
    names__.emplace_back("theta");
    names__.emplace_back("gp_theta");
    names__.emplace_back("Lcorr");
    names__.emplace_back("sigma_process");
    names__.emplace_back("effectsKnots");
    names__.emplace_back("pred");
    names__.emplace_back("Z");
    names__.emplace_back("yall");
    names__.emplace_back("sigma_vec");
    names__.emplace_back("gamma_a_vec");
    names__.emplace_back("nb_phi_vec");
    names__.emplace_back("phi_vec");
    names__.emplace_back("theta_vec");
    names__.emplace_back("x");
    names__.emplace_back("indicator");
    names__.emplace_back("psi_root");
    names__.emplace_back("Sigma_derived");
    names__.emplace_back("Sigma_temp");
    names__.emplace_back("sigma12_vec");
    names__.emplace_back("temp_sums");
    names__.emplace_back("temp_counts");
    names__.emplace_back("cond_sigma_vec");
    names__.emplace_back("cond_mean_vec");
    names__.emplace_back("sigma11");
    names__.emplace_back("sigma_pro");
    names__.emplace_back("spline_a_trans");
    names__.emplace_back("SigmaKnots");
    names__.emplace_back("obs_cov_offset");
    names__.emplace_back("log_lik");
    names__.emplace_back("Omega");
    names__.emplace_back("Sigma");
    names__.emplace_back("xstar");
    names__.emplace_back("future_devs");
    names__.emplace_back("SigmaKnots_pred");
    names__.emplace_back("SigmaOffDiag_pred");
    names__.emplace_back("j");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(devs_1dim__)
                                             ,
                                             static_cast<size_t>(devs_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(psi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(z_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(zpos_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p_z_1dim__),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(spline_a_1dim__)
                                             ,
                                             static_cast<size_t>(spline_a_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_obs_covar)
                                             , static_cast<size_t>(P)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_pro_covar)
                                             , static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma_a_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nb2_phi_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(estimate_nu)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_na)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(theta_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gp_theta_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_pcor),
                                             static_cast<size_t>(n_pcor)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_process_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(effectsKnots_1dim__)
                                             ,
                                             static_cast<size_t>(effectsKnots_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(P),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(P),
                                             static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(P),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_vec_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(gamma_a_vec_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(nb_phi_vec_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(psi_root_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(Sigma_derived_1dim__)
                                             ,
                                             static_cast<size_t>(Sigma_derived_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(Sigma_temp_1dim__)
                                             ,
                                             static_cast<size_t>(Sigma_temp_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma12_vec_1dim__)
                                             , static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(temp_sums_1dim__)
                                             ,
                                             static_cast<size_t>(temp_sums_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(temp_counts_1dim__)
                                             ,
                                             static_cast<size_t>(temp_counts_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(cond_sigma_vec_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(cond_mean_vec_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(spline_a_trans_1dim__)
                                             ,
                                             static_cast<size_t>(spline_a_trans_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(n_knots),
                                             static_cast<size_t>(n_knots)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_pos)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_loglik)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_pcor),
                                             static_cast<size_t>(n_pcor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_pcor),
                                             static_cast<size_t>(n_pcor)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_knots),
                                             static_cast<size_t>(n_knots)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_knots)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "devs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zpos" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "spline_a" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_obs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_pro" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nb2_phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ymiss" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gp_theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Lcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_process" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "effectsKnots" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "yall" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nb_phi_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "indicator" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_root" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Sigma_derived_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Sigma_derived_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_derived" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Sigma_temp_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Sigma_temp_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_temp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= sigma12_vec_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sigma12_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= temp_sums_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= temp_sums_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "temp_sums" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= temp_counts_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= temp_counts_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "temp_counts" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= cond_sigma_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cond_sigma_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= cond_mean_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cond_mean_vec" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma11");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_pro" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= spline_a_trans_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= spline_a_trans_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "spline_a_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "SigmaKnots" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_cov_offset" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_loglik; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "xstar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "future_devs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SigmaKnots_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "SigmaOffDiag_pred" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "j");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= devs_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= devs_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "devs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= psi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "psi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= zpos_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zpos" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= p_z_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= spline_a_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= spline_a_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "spline_a" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_obs_covar; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_obs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_pro_covar; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_pro" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gamma_a_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_a" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= nb2_phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nb2_phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= estimate_nu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_na; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ymiss" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= gp_theta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gp_theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((n_pcor * (n_pcor - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Lcorr" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_process_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_process" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= effectsKnots_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= effectsKnots_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "effectsKnots" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= P; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "yall" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= sigma_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= gamma_a_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gamma_a_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= nb_phi_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nb_phi_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "indicator" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= psi_root_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_root" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Sigma_derived_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Sigma_derived_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_derived" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Sigma_temp_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Sigma_temp_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_temp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= sigma12_vec_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sigma12_vec" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= temp_sums_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= temp_sums_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "temp_sums" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= temp_counts_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= temp_counts_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "temp_counts" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= cond_sigma_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cond_sigma_vec" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= cond_mean_vec_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cond_mean_vec" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma11");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma_pro" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= spline_a_trans_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= spline_a_trans_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "spline_a_trans" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "SigmaKnots" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pos; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "obs_cov_offset" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_loglik; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pcor; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_pcor; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "xstar" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "future_devs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_knots; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "SigmaKnots_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_knots; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "SigmaOffDiag_pred" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "j");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"devs\",\"type\":{\"name\":\"matrix\",\"rows\":" << devs_1dim__ << ",\"cols\":" << devs_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" << psi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" << z_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"zpos\",\"type\":{\"name\":\"vector\",\"length\":" << zpos_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"p_z\",\"type\":{\"name\":\"array\",\"length\":" << p_z_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << K << "}},\"block\":\"parameters\"},{\"name\":\"spline_a\",\"type\":{\"name\":\"matrix\",\"rows\":" << spline_a_1dim__ << ",\"cols\":" << spline_a_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"b_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_obs_covar << ",\"cols\":" << P << "},\"block\":\"parameters\"},{\"name\":\"b_pro\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pro_covar << ",\"cols\":" << K << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << sigma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma_a\",\"type\":{\"name\":\"array\",\"length\":" << gamma_a_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nb2_phi\",\"type\":{\"name\":\"array\",\"length\":" << nb2_phi_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" << estimate_nu << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ymiss\",\"type\":{\"name\":\"array\",\"length\":" << n_na << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" << phi_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << theta_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gp_theta\",\"type\":{\"name\":\"array\",\"length\":" << gp_theta_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Lcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pcor << ",\"cols\":" << n_pcor << "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" << sigma_process_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"effectsKnots\",\"type\":{\"name\":\"array\",\"length\":" << effectsKnots_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << effectsKnots_2dim__ << "}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"matrix\",\"rows\":" << P << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"Z\",\"type\":{\"name\":\"matrix\",\"rows\":" << P << ",\"cols\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"yall\",\"type\":{\"name\":\"matrix\",\"rows\":" << P << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_vec\",\"type\":{\"name\":\"vector\",\"length\":" << gamma_a_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"nb_phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" << nb_phi_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"indicator\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_root\",\"type\":{\"name\":\"vector\",\"length\":" << psi_root_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_derived\",\"type\":{\"name\":\"matrix\",\"rows\":" << Sigma_derived_1dim__ << ",\"cols\":" << Sigma_derived_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_temp\",\"type\":{\"name\":\"matrix\",\"rows\":" << Sigma_temp_1dim__ << ",\"cols\":" << Sigma_temp_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma12_vec\",\"type\":{\"name\":\"matrix\",\"rows\":" << sigma12_vec_1dim__ << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_sums\",\"type\":{\"name\":\"matrix\",\"rows\":" << temp_sums_1dim__ << ",\"cols\":" << temp_sums_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_counts\",\"type\":{\"name\":\"matrix\",\"rows\":" << temp_counts_1dim__ << ",\"cols\":" << temp_counts_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" << cond_sigma_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_mean_vec\",\"type\":{\"name\":\"vector\",\"length\":" << cond_mean_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_pro\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"spline_a_trans\",\"type\":{\"name\":\"matrix\",\"rows\":" << spline_a_trans_1dim__ << ",\"cols\":" << spline_a_trans_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"SigmaKnots\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << n_knots << ",\"cols\":" << n_knots << "}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_cov_offset\",\"type\":{\"name\":\"vector\",\"length\":" << n_pos << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << n_loglik << "},\"block\":\"generated_quantities\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pcor << ",\"cols\":" << n_pcor << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pcor << ",\"cols\":" << n_pcor << "},\"block\":\"generated_quantities\"},{\"name\":\"xstar\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << 1 << "},\"block\":\"generated_quantities\"},{\"name\":\"future_devs\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaKnots_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_knots << ",\"cols\":" << n_knots << "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaOffDiag_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_knots << "},\"block\":\"generated_quantities\"},{\"name\":\"j\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"devs\",\"type\":{\"name\":\"matrix\",\"rows\":" << devs_1dim__ << ",\"cols\":" << devs_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"x0\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" << psi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" << z_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"zpos\",\"type\":{\"name\":\"vector\",\"length\":" << zpos_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"p_z\",\"type\":{\"name\":\"array\",\"length\":" << p_z_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (K - 1) << "}},\"block\":\"parameters\"},{\"name\":\"spline_a\",\"type\":{\"name\":\"matrix\",\"rows\":" << spline_a_1dim__ << ",\"cols\":" << spline_a_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"b_obs\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_obs_covar << ",\"cols\":" << P << "},\"block\":\"parameters\"},{\"name\":\"b_pro\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pro_covar << ",\"cols\":" << K << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << sigma_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma_a\",\"type\":{\"name\":\"array\",\"length\":" << gamma_a_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nb2_phi\",\"type\":{\"name\":\"array\",\"length\":" << nb2_phi_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"array\",\"length\":" << estimate_nu << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ymiss\",\"type\":{\"name\":\"array\",\"length\":" << n_na << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" << phi_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << theta_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gp_theta\",\"type\":{\"name\":\"array\",\"length\":" << gp_theta_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"Lcorr\",\"type\":{\"name\":\"vector\",\"length\":" << ((n_pcor * (n_pcor - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"sigma_process\",\"type\":{\"name\":\"array\",\"length\":" << sigma_process_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"effectsKnots\",\"type\":{\"name\":\"array\",\"length\":" << effectsKnots_1dim__ << ",\"element_type\":{\"name\":\"vector\",\"length\":" << effectsKnots_2dim__ << "}},\"block\":\"parameters\"},{\"name\":\"pred\",\"type\":{\"name\":\"matrix\",\"rows\":" << P << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"Z\",\"type\":{\"name\":\"matrix\",\"rows\":" << P << ",\"cols\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"yall\",\"type\":{\"name\":\"matrix\",\"rows\":" << P << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"gamma_a_vec\",\"type\":{\"name\":\"vector\",\"length\":" << gamma_a_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"nb_phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" << nb_phi_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"indicator\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_root\",\"type\":{\"name\":\"vector\",\"length\":" << psi_root_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_derived\",\"type\":{\"name\":\"matrix\",\"rows\":" << Sigma_derived_1dim__ << ",\"cols\":" << Sigma_derived_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_temp\",\"type\":{\"name\":\"matrix\",\"rows\":" << Sigma_temp_1dim__ << ",\"cols\":" << Sigma_temp_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma12_vec\",\"type\":{\"name\":\"matrix\",\"rows\":" << sigma12_vec_1dim__ << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_sums\",\"type\":{\"name\":\"matrix\",\"rows\":" << temp_sums_1dim__ << ",\"cols\":" << temp_sums_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"temp_counts\",\"type\":{\"name\":\"matrix\",\"rows\":" << temp_counts_1dim__ << ",\"cols\":" << temp_counts_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_sigma_vec\",\"type\":{\"name\":\"vector\",\"length\":" << cond_sigma_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"cond_mean_vec\",\"type\":{\"name\":\"vector\",\"length\":" << cond_mean_vec_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma11\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_pro\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"spline_a_trans\",\"type\":{\"name\":\"matrix\",\"rows\":" << spline_a_trans_1dim__ << ",\"cols\":" << spline_a_trans_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"SigmaKnots\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << n_knots << ",\"cols\":" << n_knots << "}},\"block\":\"transformed_parameters\"},{\"name\":\"obs_cov_offset\",\"type\":{\"name\":\"vector\",\"length\":" << n_pos << "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << n_loglik << "},\"block\":\"generated_quantities\"},{\"name\":\"Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pcor << ",\"cols\":" << n_pcor << "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_pcor << ",\"cols\":" << n_pcor << "},\"block\":\"generated_quantities\"},{\"name\":\"xstar\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << 1 << "},\"block\":\"generated_quantities\"},{\"name\":\"future_devs\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaKnots_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_knots << ",\"cols\":" << n_knots << "},\"block\":\"generated_quantities\"},{\"name\":\"SigmaOffDiag_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_knots << "},\"block\":\"generated_quantities\"},{\"name\":\"j\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_dfa_namespace::model_dfa;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_dfa_namespace::profiles__;
}
#endif
#endif
